import collapsibleNav from '../components/collapsible-nav';

describe('collapsibleNav', () => {
  let navItem1;
  let navItemButton1;
  let navItem2;
  let navItem3;

  const TEST_PATH = '/test/path/url';

  beforeEach(() => {
    const fixture = `
      <div data-js-collapsible-nav>
        <div data-js-collapsible-nav-item id="nav-item-1" class="is-open">
          <button data-js-collapsible-nav-button id="nav-item-1-button"></button>
          <div data-js-collapsible-nav-child></div>
        </div>

        <div data-js-collapsible-nav-item id="nav-item-2">
          <button data-js-collapsible-nav-button></button>
          <div data-js-collapsible-nav-child>
            <div data-js-collapsible-nav-item id="nav-item-3">
              <a id="active-link" href="${TEST_PATH}"></a>
              <button data-js-collapsible-nav-butto></button>
              <div data-js-collapsible-nav-child></div>
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.innerHTML = fixture;

    navItem1 = document.querySelector('#nav-item-1');
    navItemButton1 = document.querySelector('#nav-item-1-button');
    navItem2 = document.querySelector('#nav-item-2');
    navItem3 = document.querySelector('#nav-item-3');

    window.getURL = {};
    spyOn(window, 'getURL').and.returnValue(new URL(`http://example.com${TEST_PATH}`));

    collapsibleNav();
  });

  afterAll(() => {
    document.body.innerHTML = '';
  });

  describe('when the page is loaded', () => {
    it(`should show all collapsible items from current level
        link/current link level to collapisble nav wrapper`, () => {
      expect(navItem3.classList.contains('is-open')).toBe(true);
      expect(navItem2.classList.contains('is-open')).toBe(true);
    });
  });

  describe('when you click the nav item button', () => {
    describe('and the item is open', () => {
      beforeEach(() => {
        navItem1.classList.add('is-open');
        navItemButton1.dispatchEvent(new Event('click', { bubbles: true }));
      });

      it('closes the item', () => {
        expect(navItem1.classList.contains('is-open')).toBe(false);
      });
    });

    describe('and the item is closed', () => {
      beforeEach(() => {
        navItem1.classList.remove('is-open');
        navItemButton1.dispatchEvent(new Event('click', { bubbles: true }));
      });

      it('opens the item', () => {
        expect(navItem1.classList.contains('is-open')).toBe(true);
      });
    });
  });
});
