import accordion from '../index';

describe('accordion', () => {
  beforeEach(() => {
    const fixture = `
      <div data-js-accordion>
        <div id="accordion-item-1" class="is-active" data-js-accordion-item>
          <button type="button" id="accordion-1-trigger" data-js-accordion-trigger>
          </button>
        </div>
        <div id="accordion-item-2" class="is-active" data-js-accordion-item>
          <button type="button" data-js-accordion-trigger></button>
        </div>
      </div>
    `;

    document.body.innerHTML = fixture;

    accordion();
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  describe('when the page is loaded', () => {
    it('should remove all of the `is-active` classes from the accordion items', () => {
      const activeAccordionItems = document.querySelectorAll(`
        #accordion-1.is-active,
        #accordion-2.is-active
      `);

      expect(activeAccordionItems.length).toEqual(0);
    });

    describe('and there are no accordions on the page', () => {
      beforeEach(() => {
        spyOn(document, 'querySelectorAll').and.returnValue([]);

        document.body.innerHTML = '';

        accordion();
      });

      it('should not execute the accordion code', () => {
        expect(document.querySelectorAll).toHaveBeenCalledTimes(1);
      });
    });
  });

  describe('when clicking on the accordion item trigger', () => {
    let accordionItem1;
    let accordionItem2;
    let accordionItem1Trigger;

    beforeEach(() => {
      accordionItem1 = document.querySelector('#accordion-item-1');
      accordionItem2 = document.querySelector('#accordion-item-2');
      accordionItem1Trigger = document.querySelector('#accordion-1-trigger');

      accordionItem1.classList.remove('is-active');
      accordionItem1Trigger.dispatchEvent(new Event('click', { bubbles: true }));
    });

    describe('and is not active', () => {
      it('should add the `is-active` class to the accordion item', () => {
        expect(accordionItem1.classList.contains('is-active')).toEqual(true);
      });

      describe('and is already active', () => {
        beforeEach(() => {
          accordionItem1.classList.add('is-active');
          accordionItem1Trigger.dispatchEvent(new Event('click', { bubbles: true }));
        });

        it('should remove the `is-active` class from the accordion item', () => {
          expect(accordionItem1.classList.contains('is-active')).toEqual(false);
        });
      });
    });

    describe('and another accordion item is already open', () => {
      beforeEach(() => {
        accordionItem1.classList.remove('is-active');
        accordionItem2.classList.add('is-active');

        accordionItem1Trigger.dispatchEvent(new Event('click', { bubbles: true }));
      });

      it('should close all other accordion items', () => {
        const siblings = Array.from(document.querySelectorAll(`
          #accordion-2.is-active
        `));

        expect(siblings.length).toEqual(0);
      });
    });
  });
});
