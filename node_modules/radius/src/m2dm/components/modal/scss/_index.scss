/**
 * section: M2DM/components/modal
 * title: Modal
 *
 * activateComponent: radius-component-modal
 * jsModule: modal
 * jsModuleParameters: '{ animationsOn: transitionsSupported }'
 *
 * abstractLink: 2a42359c-68a4-40ce-8e6e-9ae7244a1fe4
 *
 * purpose: Use to serve additional content in an overlay above all other content.
 *
 * description: |
 *
 *   Only one modal can be displayed at a time.<br><br>
 *
 *   On mobile screens the modal takes up the entire screen width and height. On larger screens, the modal takes up the centre of the page, and displays an overlay over the rest of the content.<br><br>
 *
 *   ### How to use
 *
 *   1. Copy the markup from the example. The modal can live anywhere in the DOM.
 *   1. Add what you wish to display inside the `.modal__content` div.
 *   1. Replace the ID of the modal to something unique. I.e. NOT `dialog-1`
 *   1. Add the button to the page where needed. Ensure the `data-js-modal-open` attribute matches the ID you gave the modal.
 * 
 *   ### How it works
 *
 *   This component is based on the [a11y-dialog](https://github.com/edenspiekermann/a11y-dialog) project, which is designed with accessibility in mind, since modals are especially problematic for screen readers.
 *
 *   The display of the modal is handled by the aria-hidden attribute. When this is set to true, the display property is set to none. The a11y-dialog library toggles only the aria-hidden attribute.
 *
 *   The `js/index.js` file exports a method which finds all the modals (elements with `data-js-modal` attributes), moves them in the DOM to sit just before the closing body tag, and activates them with a method from the a11y-dialog library
 *
 *   It moves the modals to sit just before the closing body tag, because the a11y-dialog library applies aria-hidden=true to every _sibling_ element of the modal. We want everything but the modal to be aria-hidden, so moving modals to just before the closing body tag makes everything else a sibling. If you want to disable that, you can pass the "no-move" value to the `data-js-modal` attribute.
 *
 *   The `data-js-content` attribute is not mandatory; whenever the modal contains an iframe element, you should pass the `video` value to this attribute which will allow interaction with the Youtube API for manipulating the player element within the modal.(**Note:** You'll also have to load the IFrame Player API Javascript code by inserting the following script: ```<script src="https://www.youtube.com/iframe_api"></script>```)
 *
 *   ### Data attributes:
 *   - `[data-js-modal]`: This attribute should be added on the modal wrapper;
 *   - `[data-js-modal-open]`: This attribute should be added on the button that will open the modal;
 *   - `[data-js-modal-close]`: This attribute should be added on the button that will close the modal;
 *   - `[data-js-content]`: This attribute should be added on the modal wrapper; it's used to identify the type of content held in the modal.
 * 
 *   ### Dependencies
 *   This component requires the `transitionsSupported` module to be included: </br />
 *   `import transitionsSupported` from `radius/dist/m2dm/js/transitions-supported`;
 *
 * markup: components/modal/example
 * youtubeApi: true
 *
 */

@mixin radius-component-modal {
  $modal-margin: 2rem;
  $modal-content-padding-top: 3.5rem;
  $modal-content-padding-bottom: 2rem;
  $modal-background-color: get-color(white);
  $modal-box-header-padding: 1rem;
  $close-button-color: get-color(blue, contrast);
  $overlay-background: rgba(0, 0, 0, 0.8);

  // disable scrolling on the body when the modal is open
  body.modal-open { // stylelint-disable-line selector-no-qualifying-type
    overflow: hidden;
  }

  .modal[aria-hidden="true"] {
    display: none;
  }

  .modal {
    @include z-index(modal);

    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }


  .modal__overlay {
    @include z-index(modal, 1);

    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    background: $overlay-background;
  }


  .modal__box {
    @include z-index(modal, 2);

    position: absolute;

    top: 50%;
    left: 50%;

    width: calc(100% - #{$modal-margin * 2});
    max-width: 41rem;
    max-height: calc(100% - #{$modal-margin * 2});
    min-height: 2rem;

    padding-bottom: $modal-content-padding-bottom;
    overflow-y: scroll;

    background: $modal-background-color;

    transform: translate(-50%, -50%);

    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.3);


    @include to(mobile-large) {
      width: 100%;
      height: 100%;
      max-height: 100%;
    }
  }


  .modal__header {
    display: table;
    width: 100%;
    padding-top: $modal-box-header-padding;
    padding-right: $modal-box-header-padding;
    padding-bottom: $modal-box-header-padding;

    text-align: right;
  }
}
