import A11yDialog from 'a11y-dialog';

export default ({ animationsOn = true } = {}) => {
  const BODY_CLASS_NAME = 'modal-open';
  const ANIMATION_DURATION = 0.4;
  const modalEls = Array.from(document.querySelectorAll('[data-js-modal]'));
  const OPEN_SELECTOR = 'data-js-modal-open';
  const CLOSE_SELECTOR = 'data-js-modal-close';

  const fromStyles = {
    opacity: 0,
  };
  const toStyles = {
    opacity: 1,
  };

  function onShow(modal) {
    Object.assign(modal.style, toStyles);
    document.body.classList.add(BODY_CLASS_NAME);

    modal.dispatchEvent(new Event('modalShow'));
  }

  function onHide(modal) {
    document.body.classList.remove(BODY_CLASS_NAME);

    modal.dispatchEvent(new Event('modalHide'));
  }

  function showButtonSelector(id) {
    return `[${OPEN_SELECTOR}=${id}]`;
  }

  let isYouTubeAPIReady = false;

  window.onYouTubeIframeAPIReady = () => {
    isYouTubeAPIReady = true;
  };

  modalEls.forEach((el) => {
    //  doing animations entirely within Javascript
    if (animationsOn) {
      el.style.transition = `${ANIMATION_DURATION}s all ease-in-out`;
    }

    let player;
    const modal = new A11yDialog(el);
    const openButtons = Array.from(document.querySelectorAll(showButtonSelector(el.id)));
    const closeButtons = Array.from(el.querySelectorAll(`[${CLOSE_SELECTOR}]`));
    //  also have to handle overlay clicks

    // move the modal to sit just before the closing body tag,
    // so that aria-hidden tags get added to all siblings
    // unless it needs to maintain current position in the document
    if (el.dataset.jsModal !== 'no-move') {
      document.body.appendChild(el);
    }

    el.style.opacity = 0;

    openButtons.forEach((openButton) => {
      openButton.addEventListener('click', (e) => {
        const currentModalId = openButton.dataset.jsModalOpen;
        const elCurrentModal = document.getElementById(currentModalId);

        e.preventDefault();
        modal.show();

        if (elCurrentModal.dataset.jsContent === 'video' && isYouTubeAPIReady) {
          const elPlayer = elCurrentModal.querySelectorAll('[data-js-player]')[0];
          const playerId = elPlayer.id;

          // Initiate the player object with the corresponding ID
          // after the API code downloads.
          if (!player) {
            player = new YT.Player(playerId);
          }
        }
      });
    });

    closeButtons.forEach((closeButton) => {
      closeButton.addEventListener('click', () => {
        Object.assign(el.style, fromStyles);

        if (animationsOn) {
          el.addEventListener('transitionend', function transitionEnd(event) {
            if (event.target === el) {
              // ignore transition events fired by children
              el.removeEventListener('transitionend', transitionEnd);
              modal.hide();
            }
          });
        } else {
          modal.hide();
        }

        if (el.dataset.jsContent === 'video') {
          if (!player) {
            return;
          }
          player.stopVideo();
        }
      });
    });

    modal.on('show', onShow);
    modal.on('hide', onHide);
  });
};
