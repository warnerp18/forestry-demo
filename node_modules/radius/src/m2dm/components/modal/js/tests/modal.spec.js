import modal from '../index';

const getModal = () => document.querySelector('#myModal');
const getModalNoMove = () => document.querySelector('#myModal-2');
const getModalVideo = () => document.querySelector('#myModal-3');
const getButton = selector => document.querySelector(selector);
const getOverlay = () => document.querySelector('.modal__overlay');

describe('modal', () => {
  let player;
  beforeEach(() => {
    jasmine.getFixtures().fixturesPath = 'base/src/m2dm/components/modal/js/tests/fixtures';
    jasmine.getFixtures().load('modal.html');

    player = jasmine.createSpyObj('youtube-player', ['stopVideo']);
    window.YT = {};
    window.YT.Player = jasmine.createSpy('youtube-mock').and.returnValue(player);
  });
  
  afterEach(() => {
    const modalElement = getModal();
    modalElement.parentElement.removeChild(modalElement);
    document.body.className = '';

    window.YT = null;
  });

  describe('when the modal instantiation method is called', () => {
    describe('when hiding or showing', () => {
      let showSpy;
      let hideSpy;

      beforeEach(() => {
        modal({
          animationsOn: false,
        });

        showSpy = jasmine.createSpy('showSpy');
        hideSpy = jasmine.createSpy('hideSpy');
        getModal().addEventListener('modalShow', showSpy);
        getModal().addEventListener('modalHide', hideSpy);

        getButton('#button-1').click();
        getModal().querySelector('[data-js-modal-close]').click();
      });

      it('should emit the show event', () => {
        expect(showSpy).toHaveBeenCalled();
      });

      it('should emit the hide event', () => {
        expect(hideSpy).toHaveBeenCalled();
      });
    });

    describe('without any parameters', () => {
      it('does not throw', () => {
        expect(modal).not.toThrow();
      });
    });

    describe('and the modal does not have "no-move" value for the data-js-modal attribute', () => {
      it('moves all modals to be just before the closing body tag', () => {
        expect(getModal().parentElement.tagName).toBe('SECTION');

        modal({
          animationsOn: false,
        });

        expect(getModal().parentElement.tagName).toBe('BODY');
      });
    });

    describe('and the modal has the "no-move" value for the data-js-modal attribute', () => {
      it('does not move the modal from the position it has in the DOM', () => {
        expect(getModalNoMove().parentElement.tagName).toBe('SECTION');

        modal({
          animationsOn: false,
        });

        expect(getModalNoMove().parentElement.tagName).toBe('SECTION');
      });
    });
  });

  describe('if has been instantiated', () => {
    beforeEach(() => {
      modal({
        animationsOn: false,
      });
    });

    describe('when modal trigger button is clicked', () => {
      it('should set aria-hidden=false on the modal', () => {
        expect(getModal()).toHaveAttr('aria-hidden', 'true');
        getButton('#button-1').click();
        expect(getModal()).not.toHaveAttr('aria-hidden');
      });

      it('should add the modal-open class to the body', () => {
        expect(document.body).not.toHaveClass('modal-open');
        getButton('#button-1').click();
        expect(document.body).toHaveClass('modal-open');
      });
    });

    describe('when the button has descendant elements', () => {
      describe('when the descendant element is clicked on', () => {
        let button;
        beforeEach(() => {
          button = getButton('#button-3');
        });
        it('should set aria-hidden=false on the modal', () => {
          getModalVideo().setAttribute('aria-hidden', 'true');
          button.click();
          expect(getModalVideo()).not.toHaveAttr('aria-hidden');
        });

        it('should add the modal-open class to the body', () => {
          document.body.classList.remove('modal-open');
          button.click();
          expect(document.body).toHaveClass('modal-open');
        });
      });
    });

    describe('when modal trigger button is clicked', () => {
      it('should set aria-hidden=false on the modal', () => {
        getModal().setAttribute('aria-hidden', 'true');
        getButton('#button-1').click();
        expect(getModal()).not.toHaveAttr('aria-hidden');
      });

      it('should add the modal-open class to the body', () => {
        document.body.classList.remove('modal-open');
        getButton('#button-1').click();
        expect(document.body).toHaveClass('modal-open');
      });
    });

    describe('when the modal has the "video" value for the data-js-content attribute', () => {
      beforeEach(() => {
        modal({
          animationsOn: false,
        });
      });

      it('sets the "onYouTubeIframeAPIReady" callback', () => {
        expect(window.onYouTubeIframeAPIReady).toEqual(jasmine.any(Function));
      });

      describe('when the modal is instantiated', () => {
        beforeEach(() => {
          window.onYouTubeIframeAPIReady();
          getButton('#button-2').click();
        });

        it('should create the player', () => {
          expect(window.YT.Player).toHaveBeenCalledWith('player');
        });

        describe('and the close button is clicked', () => {
          it('should close the player', () => {
            getModalVideo().querySelector('[data-js-modal-close]').click();
            expect(player.stopVideo).toHaveBeenCalled();
          });
        });
      });
    });
    
    describe('if the modal is open already', () => {
      beforeEach(() => {
        getButton('#button-1').click();
      });
      
      describe('when the overlay is clicked', () => {
        it('should set aria-hidden=true on the modal', () => {
          getOverlay().click();
          expect(getModal()).toHaveAttr('aria-hidden', 'true');
        });
        
        it('should remove the modal-open class from the body', () => {
          getOverlay().click();
          expect(document.body).not.toHaveClass('modal-open');
        });
      });

      describe('when the close button is pressed', () => {
        beforeEach(() => {
          getModal().querySelector('[data-js-modal-close]').click();
        });

        it('should set aria-hidden=true on the modal', () => {
          expect(getModal()).toHaveAttr('aria-hidden', 'true');
        });
        
        it('should remove the modal-open class from the body', () => {
          expect(document.body).not.toHaveClass('modal-open');
        });
      });
    });
  });
});
