import $ from 'jquery';
import stepCard from '../index';

describe('stepCard', () => {
  beforeEach(() => {
    const fixture = `
      <style>
        #step-card-2-to-show,
        #step-card-2.is-collapsed #step-card-2-to-hide {
          display: none;
          opacity: 0;
          transition: opacity 0.01s;
        }


        #step-card-2-to-hide,
        #step-card-2.is-collapsed #step-card-2-to-show {
          display: block;
          opacity: 1;
          transition: opacity 0.01s;
        }
      </style>
      <section id="step-card-1" class="step-card" data-js-step-card>
        <button id="step-card-1-toggle" data-js-step-card-toggle></button>
      </section>
      <section id="step-card-2" class="step-card" data-js-step-card>
        <div id="step-card-2-to-hide" class="step-card__content" data-js-step-card-tohide>
          1
          <br>
          2
        </div>
        <div id="step-card-2-to-show" class="step-card__collapse" data-js-step-card-toshow>
          1
          <br>
          2
          <br>
          3
        </div>
        <button id="step-card-2-toggle" data-js-step-card-toggle></button>
      </section>
    `;

    $('body').html(fixture);

    stepCard();
  });

  let stepCard1;
  let stepCard1Toggle;

  describe('when clicking on the step card toggle', () => {
    beforeEach(() => {
      stepCard1 = document.querySelector('#step-card-1');
      stepCard1Toggle = document.querySelector('#step-card-1-toggle');

      stepCard1Toggle.dispatchEvent(new Event('click'));
    });

    describe('and is not collapsed', () => {
      describe('and there is not a callback for collapsing', () => {
        it('should add the `is-collapsed` class', () => {
          expect(stepCard1.classList.contains('is-collapsed')).toEqual(true);
        });
      });

      describe('and there is a callback for collapsing', () => {
        beforeEach(() => {
          stepCard1.classList.remove('is-collapsed');

          stepCard1.toCollapse = callback => callback();

          spyOn(stepCard1, 'toCollapse');

          $('#step-card-1-toggle').trigger('click');
        });

        it('should collapse after the callback is completed', () => {
          expect(stepCard1.toCollapse).toHaveBeenCalled();
        });
      });
    });

    describe('and is already collapsed', () => {
      beforeEach(() => {
        stepCard1.classList.add('is-collapsed');

        stepCard1.toCollapse = callback => callback();

        spyOn(stepCard1, 'toCollapse');

        stepCard1Toggle.dispatchEvent(new Event('click'));
      });

      it('should remove the `is-collapsed` class', () => {
        expect(stepCard1.classList.contains('is-collapsed')).toEqual(false);
      });

      it('should expand without a callback', () => {
        expect(stepCard1.toCollapse).not.toHaveBeenCalled();
      });
    });

    describe('and animation has completed', () => {
      beforeEach((done) => {
        $('#step-card-2')[0].addEventListener('doneAnimation', done);
        $('#step-card-2-toggle').trigger('click');
      });

      it('should show the `to-show` element', () => {
        expect($('#step-card-2-to-show')).toBeVisible();
      });

      it('should hide the `to-hide` element', () => {
        expect($('#step-card-2-to-hide')).not.toBeVisible();
      });
    });
  });
});
