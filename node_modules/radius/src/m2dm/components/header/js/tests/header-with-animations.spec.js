import HeaderWithAnimations from '../header-with-animations';
import { MORE_SELECTOR, HIDE_SELECTOR, BODY_CLASS_NAME } from '../header';

describe('header with animations', () => {
  let headerEl;
  let header;
  let moreButton;
  let lessButton;

  const isClassOnBody = () => document.body.classList.contains(BODY_CLASS_NAME);

  beforeEach(() => {
    jasmine.getFixtures().fixturesPath = 'base/src/m2dm/components/header/js/tests/fixtures';
    jasmine.getFixtures().load('header.html');
    headerEl = document.querySelector('[data-js-header]');
    moreButton = headerEl.querySelector(MORE_SELECTOR);
    lessButton = headerEl.querySelector(HIDE_SELECTOR);

    header = new HeaderWithAnimations(headerEl, 0.0001);
    header.start();
  });

  describe('When overlay is NOT open', () => {
    beforeEach(() => {
      header.headerEl.className = '';
      header.isOpen = false;
      header.overlayEl.style.display = 'none';
      document.body.className = '';
    });
    describe('When NOT in progress', () => {
      beforeEach((done) => {
        header.inProgress = false;
        //  test is finished once event bubbles to body
        document.body.addEventListener('transitionend', () => {
          done();
        });
        moreButton.click();
      });

      it('should show overlay', () => {
        expect(header.overlayEl.style.display).toBe('block');
      });
      it('should freeze body', () => {
        expect(isClassOnBody()).toBe(true);
      });
      it('should add "is-active" to header', () => {
        expect(header.headerEl.classList.contains('is-active')).toBe(true);
      });
      it('should reset inProgress to FALSE', () => {
        expect(header.inProgress).toBe(false);
      });
      it('should reset isOpen to TRUE', () => {
        expect(header.isOpen).toBe(true);
      });
      it('should set opacity of overlay to 1', () => {
        expect(header.overlayEl.style.opacity).toBe('1');
      });
    });
    describe('When in progress', () => {
      beforeEach(() => {
        header.inProgress = true;
        moreButton.click();
      });
      it('should NOT show overlay', () => {
        expect(header.overlayEl.style.display).toBe('none');
      });
      it('should NOT freeze body', () => {
        expect(isClassOnBody()).toBe(false);
      });
      it('should NOT add "is-active" to header', () => {
        expect(header.headerEl.classList.contains('is-active')).toBe(false);
      });
      it('should NOT set inProgress to FALSE', () => {
        expect(header.inProgress).toBe(true);
      });
      it('should NOT set isOpen to true', () => {
        expect(header.isOpen).toBe(false);
      });
      it('should NOT set overlay opacity', () => {
        expect(header.overlayEl.style.opacity).toBe('');
      });
    });
  });
  describe('When overlay is open', () => {
    beforeEach(() => {
      header.isOpen = true;
      header.overlayEl.style.display = 'block';
      header.headerEl.classList.add('is-active');
      document.body.classList.add('header-overlay-open');
    });
    describe('When NOT in progress', () => {
      beforeEach(() => {
        header.inProgress = false;
      });
      describe('When user clicks less button', () => {
        beforeEach((done) => {
          //  test is finished once event bubbles to body
          document.body.addEventListener('transitionend', () => {
            done();
          });
          lessButton.click();
        });
        it('should hide overlay', () => {
          expect(header.overlayEl.style.display).toBe('none');
        });
        it('should unfreeze body', () => {
          expect(isClassOnBody()).toBe(false);
        });
        it('should remove "is-active" from header', () => {
          expect(header.headerEl.classList.contains('is-active')).toBe(false);
        });
        it('should reset inProgress to FALSE', () => {
          expect(header.inProgress).toBe(false);
        });
        it('should reset isOpen to FALSE', () => {
          expect(header.isOpen).toBe(false);
        });
        it('should set opacity of overlay to 0', () => {
          expect(header.overlayEl.style.opacity).toBe('0');
        });
      });
      describe('When user clicks Escape key', () => {
        beforeEach((done) => {
          //  test is finished once event bubbles to body
          document.body.addEventListener('transitionend', () => {
            done();
          });
          const event = new KeyboardEvent('keydown', { key: 'Escape' });
          document.dispatchEvent(event);
        });
        it('should hide overlay', () => {
          expect(header.overlayEl.style.display).toBe('none');
        });
        it('should unfreeze body', () => {
          expect(isClassOnBody()).toBe(false);
        });
        it('should remove "is-active" from header', () => {
          expect(header.headerEl.classList.contains('is-active')).toBe(false);
        });
        it('should reset inProgress to FALSE', () => {
          expect(header.inProgress).toBe(false);
        });
        it('should reset isOpen to FALSE', () => {
          expect(header.isOpen).toBe(false);
        });
        it('should set opacity of overlay to 0', () => {
          expect(header.overlayEl.style.opacity).toBe('0');
        });
      });
    });
    describe('When in progress', () => {
      describe('When user clicks less button', () => {
        beforeEach(() => {
          header.inProgress = true;
          lessButton.click();
        });
        it('should NOT hide overlay', () => {
          expect(header.overlayEl.style.display).toBe('block');
        });
        it('should NOT unfreeze body', () => {
          expect(isClassOnBody()).toBe(true);
        });
        it('should NOT remove "is-active" from header', () => {
          expect(header.headerEl.classList.contains('is-active')).toBe(true);
        });
        it('should NOT reset inProgress to false', () => {
          expect(header.inProgress).toBe(true);
        });
        it('should NOT reset isOpen to FALSE', () => {
          expect(header.isOpen).toBe(true);
        });
        it('should NOT set opacity of overlay', () => {
          expect(header.overlayEl.style.opacity).toBe('');
        });
      });
      describe('When user clicks Escape key', () => {
        beforeEach(() => {
          header.inProgress = true;
          const event = new KeyboardEvent('keydown', { key: 'Escape' });
          document.dispatchEvent(event);
        });
        it('should NOT hide overlay', () => {
          expect(header.overlayEl.style.display).toBe('block');
        });
        it('should NOT unfreeze body', () => {
          expect(isClassOnBody()).toBe(true);
        });
        it('should NOT remove "is-active" from header', () => {
          expect(header.headerEl.classList.contains('is-active')).toBe(true);
        });
        it('should NOT reset inProgress to false', () => {
          expect(header.inProgress).toBe(true);
        });
        it('should NOT reset isOpen to FALSE', () => {
          expect(header.isOpen).toBe(true);
        });
        it('should NOT set opacity of overlay', () => {
          expect(header.overlayEl.style.opacity).toBe('');
        });
      });
    });
  });
});
