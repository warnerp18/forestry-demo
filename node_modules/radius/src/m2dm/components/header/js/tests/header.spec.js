import Header, { MORE_SELECTOR, HIDE_SELECTOR, BODY_CLASS_NAME } from '../header';

describe('header', () => {
  let headerEl;
  let header;
  let moreButton;
  let lessButton;

  const isClassOnBody = () => document.body.classList.contains(BODY_CLASS_NAME);

  beforeEach(() => {
    jasmine.getFixtures().fixturesPath = 'base/src/m2dm/components/header/js/tests/fixtures';
    jasmine.getFixtures().load('header.html');
    headerEl = document.querySelector('[data-js-header]');
    moreButton = headerEl.querySelector(MORE_SELECTOR);
    lessButton = headerEl.querySelector(HIDE_SELECTOR);

    header = new Header(headerEl, {});
    header.start();
  });

  describe('When overlay is NOT open', () => {
    beforeEach(() => {
      header.headerEl.className = '';
      header.isOpen = false;
      header.overlayEl.style.display = 'none';
      document.body.className = '';
      header.inProgress = false;
      moreButton.click();
    });

    it('should show overlay', () => {
      expect(header.overlayEl.style.display).toBe('block');
    });
    it('should freeze body', () => {
      expect(isClassOnBody()).toBe(true);
    });
    it('should add "is-active" to header', () => {
      expect(header.headerEl.classList.contains('is-active')).toBe(true);
    });
    it('should reset inProgress to FALSE', () => {
      expect(header.inProgress).toBe(false);
    });
    it('should reset isOpen to TRUE', () => {
      expect(header.isOpen).toBe(true);
    });
  });
  describe('When overlay is open', () => {
    beforeEach(() => {
      header.isOpen = true;
      header.overlayEl.style.display = 'block';
      header.headerEl.classList.add('is-active');
      document.body.classList.add('header-overlay-open');
      header.inProgress = false;
    });
    describe('When user clicks less button', () => {
      beforeEach(() => {
        lessButton.click();
      });
      it('should hide overlay', () => {
        expect(header.overlayEl.style.display).toBe('none');
      });
      it('should unfreeze body', () => {
        expect(isClassOnBody()).toBe(false);
      });
      it('should remove "is-active" from header', () => {
        expect(header.headerEl.classList.contains('is-active')).toBe(false);
      });
      it('should reset inProgress to FALSE', () => {
        expect(header.inProgress).toBe(false);
      });
      it('should reset isOpen to FALSE', () => {
        expect(header.isOpen).toBe(false);
      });
    });
    describe('When user clicks Escape key', () => {
      beforeEach(() => {
        const event = new KeyboardEvent('keydown', { key: 'Escape' });
        document.dispatchEvent(event);
      });
      it('should hide overlay', () => {
        expect(header.overlayEl.style.display).toBe('none');
      });
      it('should unfreeze body', () => {
        expect(isClassOnBody()).toBe(false);
      });
      it('should remove "is-active" from header', () => {
        expect(header.headerEl.classList.contains('is-active')).toBe(false);
      });
      it('should reset inProgress to FALSE', () => {
        expect(header.inProgress).toBe(false);
      });
      it('should reset isOpen to FALSE', () => {
        expect(header.isOpen).toBe(false);
      });
    });
  });

  describe('when the overlay does not exist', () => {
    let headerWithoutOverlay;
    beforeEach(() => {
      const headerWithoutOverlayEl = document.querySelector('#header-with-no-overlay');
      headerWithoutOverlay = new Header(headerWithoutOverlayEl, {});
      headerWithoutOverlay.start();
    });

    it('should report there is no overlay', () => {
      expect(headerWithoutOverlay.hasOverlay).toBe(false);
    });
  });
});
