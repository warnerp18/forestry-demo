/**
 * section: M2DM/components/cta
 * title: CTA
 *
 * activateComponent: radius-component-cta
 *
 * abstractLink: 5184a641-a695-4376-bacc-426a206f5a7a
 *
 * purpose: Use to signify that the user needs to take an action.
 *
 * description: |
 *   Can be used in any context but when pairing a primary CTA with a secondary action, use a text link for the secondary action.
 *   For disabled buttons, apply the class `is-disabled` or simply add the `disabled` attribute. For disabled links, simply apply the class `is-disabled`.
 *
 *   ### variations:
 *     - `cta-secondary--inverse`: For cases when the button will sit on dark backgrounds.
 *     - `cta--block`: Purpose is to create a perception that the button is related to the other elements that are grouped with it by creating a sense of continuation and symmetry. The block button does this by filling the full width of it’s container on small screens to visually align with other elements that also fill the container’s full width. A requirement for the cta block is to be wrapped in a block container.
 *     - `cta--minor`: reduces the size of the cta
 *     - `cta-primary--process`: Variation of primary button that should be used when the action of the button is not instant (e.g. waiting for the response from the server when posting a form). For the processing state to be active, the button requires the `is-processing` class. When the processing state is active, the text of the button will be replaced with the content of the `data-process-text` attribute. Works with both regular and `cta--minor` variation.
 *
 *
 * layout: components/cta/example
 *
 * markup: components/cta/example-markup
 */

@import "layout-patterns/index";

@mixin radius-component-cta {
  $active-color: get-color(orange, contrast);
  $border-width: 1px; // stylelint-disable-line declaration-property-unit-whitelist
  $button-height: 3rem;
  $contrast-color: get-color(white);
  $contrast-color-disabled: grayscale(darken($contrast-color, 5%));
  $contrast-color-darken: darken($contrast-color, 5%);
  $disabled-opacity: 0.7;
  $font-size: 1.25rem;
  $link-color: get-color(grey);
  $link-contrast-color: get-color(grey, contrast);
  $link-color-disabled: lighten($link-color, 5%);
  $main-color: get-color(blue, contrast);
  $main-color-disabled: grayscale(darken($main-color, 5%));
  $main-color-lighten: lighten($main-color, 5%);
  $main-color-darken: darken($main-color, 5%);
  $vertical-padding: ($button-height - $font-size) / 2;
  $horizontal-padding: 1.5rem;
  $hit-area-vspace: 0.5rem;
  $hit-area-offset: -$hit-area-vspace;
  $text-hover: lighten(get-color(white), 5%);

  $height-minor: 2rem;
  $font-size-minor: 1rem;
  $horizontal-padding-minor: 0.5rem;
  $vertical-padding-minor: ($height-minor - $font-size-minor) / 2;

  $process-icon-size: 1.5rem;
  $process-icon-size-minor: 1rem;


  @keyframes ctaIconRotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }


  %cta {
    display: inline-block;
    // fallback for browsers which don't support calc
    padding: $vertical-padding $horizontal-padding;
    padding: calc(#{$vertical-padding} - #{$border-width}) $horizontal-padding;

    font-size: $font-size;
    line-height: 1;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;

    cursor: pointer;
    border-style: solid;
    border-width: $border-width;
    border-radius: 0.5rem;

    transition: all 0.1s ease-in;

    &:hover,
    &:focus {
      outline: none;
    }


    &:active {
      transition: none;
    }
  }

  .cta--minor {
    padding: $vertical-padding-minor $horizontal-padding-minor; //  fallback for browsers without calc()
    padding: calc(#{$vertical-padding-minor} - #{$border-width}) $horizontal-padding-minor;

    font-size: $font-size-minor;
  }

  .cta-primary {
    @extend %cta;

    color: $contrast-color;

    background-color: $main-color;
    border-color: $main-color;


    &:hover,
    &:focus {
      color: $text-hover;

      background-color: $main-color-lighten;
      border-color: $main-color-lighten;
    }


    &:active {
      color: $contrast-color-darken;

      background-color: $main-color-darken;
      border-color: $main-color-darken;
    }
  }


  .cta-primary.is-disabled,
  .cta-primary[disabled] {
    color: $contrast-color-darken;

    pointer-events: none;

    background-color: $main-color-disabled;
    border-color: $main-color-disabled;

    opacity: $disabled-opacity;
  }


  .cta-primary--process {
    position: relative;
  }


  .cta-primary--process.is-processing {
    padding-left: ($process-icon-size + $horizontal-padding);

    color: get-color(grey, light);

    background: get-color(grey, 4x-light);

    border: 1px solid get-color(grey, 2x-light);
  }


  .cta-primary--process.cta--minor.is-processing {
    padding-left: ($process-icon-size-minor + $horizontal-padding-minor + 0.25rem);
  }


  .cta-primary--process .cta-primary__icon {
    position: absolute;
    top: 0;
    bottom: 0;
    left: ($horizontal-padding / 2);

    display: none;
    width: $process-icon-size;
    height: $process-icon-size;

    margin-top: auto;
    margin-bottom: auto;

    animation-duration: 1.5s;
    animation-iteration-count: infinite;
    animation-timing-function: cubic-bezier(0.17, 0.67, 0.83, 0.67);
  }

  .cta-primary--process.cta--minor .cta-primary__icon {
    left: $horizontal-padding-minor;

    width: $process-icon-size-minor;
    height: $process-icon-size-minor;
  }


  .cta-primary--process.is-processing .cta-primary__icon {
    display: inline-block;

    animation-name: ctaIconRotate;
  }


  .cta-primary--process::after {
    display: none;

    content: attr(data-process-text);
  }


  .cta-primary--process.is-processing span {
    display: none;
  }


  .cta-primary--process.is-processing::after {
    display: inline-block;
  }


  .cta-secondary {
    @extend %cta;

    color: $main-color;

    background-color: transparent;
    border-color: $main-color;


    &:hover,
    &:focus {

      color: $active-color;

      border-color: $active-color;
    }


    &:active {
      color: $link-contrast-color;

      border-color: $active-color;
    }
  }


  .cta-secondary--inverse {
    @extend %cta;

    color: $contrast-color;

    background-color: transparent;


    &:hover,
    &:focus {
      color: $active-color;

      border-color: $active-color;
    }


    &:active {
      color: $contrast-color;

      border-color: $active-color;
    }
  }


  .cta-secondary.is-disabled,
  .cta-secondary[disabled],
  .cta-secondary--inverse.is-disabled,
  .cta-secondary--inverse[disabled] {
    pointer-events: none;

    opacity: $disabled-opacity;
  }


  .cta-secondary.is-disabled,
  .cta-secondary[disabled] {
    color: $main-color-disabled;

    border-color: $main-color-disabled;
  }


  .cta-secondary--inverse.is-disabled,
  .cta-secondary--inverse[disabled] {
    color: $contrast-color-disabled;

    border-color: $contrast-color-disabled;
  }


  %text-link {
    display: inline-block;

    padding: $hit-area-vspace;
    margin: $hit-area-offset;

    font-family: inherit;
    font-size: inherit;
    line-height: inherit;

    text-decoration: none;

    background-color: transparent;

    border: 0;


    &::after {
      display: block;
      height: 0.125rem;

      content: "";
    }


    &:hover,
    &:focus {
      color: $active-color;

      outline: none;
      transition: all 0.1s ease-in;


      &::after {
        background-color: $active-color;
      }
    }


    &:active {
      transition: none;
    }
  }


  .cta-link {
    @extend %text-link;

    color: inherit;


    &::after {
      background-color: $main-color;
    }


    &:active {
      color: $link-contrast-color;
    }
  }


  .cta-link--inverse {
    @extend %text-link;

    color: $contrast-color;


    &::after {
      background-color: $main-color;
    }


    &:active {
      color: $contrast-color;
    }
  }


  .cta-link.is-disabled,
  .cta-link--inverse.is-disabled {
    color: $link-color-disabled;

    pointer-events: none;

    opacity: $disabled-opacity;


    &::after {
      background-color: $main-color-disabled;
    }
  }


  .cta-link--inverse.is-disabled {
    color: $contrast-color-disabled;
  }


  .cta--block {
    display: block;
    width: 100%;
    min-width: 10rem;


    @include from(mobile-medium) {
      display: inline-block;
      width: auto;
      max-width: 100%;
    }
  }
}
