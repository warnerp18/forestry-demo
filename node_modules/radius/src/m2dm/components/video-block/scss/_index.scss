/**
 * section: M2DM/components/video-block
 * title: Video block
 *
 * activateComponent: radius-component-video-block
 * jsModule: video-block
 * jsFunction: videoBlock
 *
 * purpose: Use to communicate complex information visually through a video.
 *
 * description: |
 *   This component provides a YouTube video block that can be used anywhere on a page.
 *
 *   ### How to use
 *   1. Copy the `video-block` markup from the example.
 *   1. Change the video URL and make sure `enablejsapi=1` param is added.
 *   1. Add `data-js-video-block-container="{video-name}"` to a chosen ancestor element - the video block will fill this container when activated.
 *   1. Make sure all `data-js` attributes use the same video name. You don't need a value on `data-js-video-block-player`.
 *   
 *   ### Good to know
 *   - `position: relative` will be added to the marked container if its position is static.
 *   - The video player always maintains a 16:9 aspect ratio while the video-block covers the entire container providing letterboxing.
 *   - The video starts playing automatically when it becomes visible and pauses when it's hidden.
 *   - This component does not need the YouTube Iframe API for it to work.
 *   - You can make the video always visible by adding a `video-block--visible` class on the video block element. The `data-js-video-block-trigger` elements are optional.
 *   - You can have as many video blocks on one page as you want, provided they use different names.
 *
 * markup: components/video-block/example
 */

@mixin radius-component-video-block {
  $overlay-color: get-color(grey, contrast);
  $overlay-color-value: rgba($overlay-color, 0.9);
  $close-icon-color: get-color(white);
  $close-icon-size: 1.5rem;
  $close-icon-spacing: 1rem;

  .video-block {
    position: absolute;
    top: 0;
    left: 0;

    display: none;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    overflow: hidden;

    background-color: $overlay-color-value;

    opacity: 0;
    transition: opacity 0.4s ease-out;
  }


  .video-block.is-transitioning {
    display: flex;
  }


  .video-block.is-visible {
    display: flex;

    opacity: 1;
    transition: opacity 0.8s ease-in;
  }

  
  .no-flexbox .video-block.is-transitioning,
  .no-flexbox .video-block.is-visible {
    display: block;
  }


  .video-block__close {
    position: absolute;
    top: $close-icon-spacing;
    right: $close-icon-spacing;

    width: $close-icon-size;
    height: $close-icon-size;

    cursor: pointer;
  }
}
