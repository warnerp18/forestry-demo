import videoBlock from '../index';

describe('videoBlock', () => {
  beforeEach(() => {
    jasmine.getFixtures().fixturesPath = 'base/src/m2dm/components/video-block/js/tests/fixtures';
  });

  describe('when there are no video-block instances on the page', () => {
    it('should not break', () => {
      expect(videoBlock).not.toThrow();
    });
  });

  describe('when there is a video-block instance on the page', () => {
    let containerEl;
    let blockEl;
    let triggerEl;
    let playerEl;

    beforeEach(() => {
      jasmine.getFixtures().load('standard.html');

      containerEl = document.getElementById('container');
      blockEl = document.getElementById('block');
      triggerEl = document.getElementById('trigger');
      playerEl = document.getElementById('player');
    });

    describe('and the video block is not visible', () => {
      describe('and the trigger element is pressed', () => {
        beforeEach((done) => {
          videoBlock();
          blockEl.addEventListener('transitionend', done);
          triggerEl.dispatchEvent(new Event('click'));
        });

        it('shows the video', () => {
          expect(blockEl.classList.contains('is-visible')).toBe(true);
        });
      });
    });

    describe('and the video block is already visible', () => {
      beforeEach(() => {
        blockEl.classList.add('is-visible');
      });

      describe('and the trigger element is pressed', () => {
        beforeEach((done) => {
          videoBlock();
          blockEl.addEventListener('transitionend', done);
          triggerEl.dispatchEvent(new Event('click'));
        });

        it('hides the video', () => {
          expect(blockEl.classList.contains('is-visible')).toBe(false);
        });
      });
    });

    describe('and the container does not have a position set', () => {
      it('sets the position value to relative', () => {
        videoBlock();

        expect(getComputedStyle(containerEl).position).toEqual('relative');
      });
    });

    describe('and the container already has a position set', () => {
      beforeEach(() => {
        containerEl.style.position = 'absolute';
      });
      
      afterEach(() => {
        containerEl.style.position = '';
      });

      it('does not override the position value', () => {
        videoBlock();

        expect(getComputedStyle(containerEl).position).toEqual('absolute');
      });
    });

    describe('and the container is wider than 16:9', () => {
      beforeEach(() => {
        containerEl.style.width = '1700px';
        containerEl.style.height = '900px';

        videoBlock();
        triggerEl.dispatchEvent(new Event('click'));
      });

      it('fills the container while maintaining the aspect ratio', () => {
        expect(getComputedStyle(playerEl).width).toEqual('1600px');
        expect(getComputedStyle(playerEl).height).toEqual('900px');
      });
    });

    describe('and the container is taller than 16:9', () => {
      beforeEach(() => {
        containerEl.style.width = '1600px';
        containerEl.style.height = '1000px';

        videoBlock();
        triggerEl.dispatchEvent(new Event('click'));
      });

      it('fills the container while maintaining the aspect ratio', () => {
        expect(getComputedStyle(playerEl).width).toEqual('1600px');
        expect(getComputedStyle(playerEl).height).toEqual('900px');
      });
    });

    describe('and the container is exactly 16:9', () => {
      beforeEach(() => {
        containerEl.style.width = '1600px';
        containerEl.style.height = '900px';

        videoBlock();
        triggerEl.dispatchEvent(new Event('click'));
      });

      it('fills the container while maintaining the aspect ratio', () => {
        expect(getComputedStyle(playerEl).width).toEqual('1600px');
        expect(getComputedStyle(playerEl).height).toEqual('900px');
      });
    });
  });

  describe('when the video-block is not a direct descendant of the container', () => {
    let containerEl;
    let blockEl;

    beforeEach(() => {
      jasmine.getFixtures().load('container-not-a-direct-parent.html');

      containerEl = document.getElementById('container');
      blockEl = document.getElementById('block');

      videoBlock();
    });

    afterEach(() => {
      containerEl = null;
      blockEl = null;
    });

    it('becomes a direct descendant of the container', () => {
      expect(blockEl.parentElement).toBe(containerEl);
    });
  });
});
