/**
 * section: M2DM/components/process-diagram/process-steps
 * title: Process steps
 *
 * activateComponent: radius-component-process-steps
 *
 * purpose: Provide the user with context for their place in a multi-step process. Show completion progress, current location and remaining steps.
 *
 * description: |
 *   Each one of the process step components is made up of process step items. These are the element with the attached class name of `process-steps__item`.
 *   To change the state of one of these components you can use state classes. These items have multiple options as displayed below in the example and markup and list:
 *     - *NO CLASS* : this is the default state of the step item. This displays the yet to be complete and not active class.
 *     - `is-active` : this state will be the current step the user is on.
 *     - `is-complete` : this state exists for previous steps that have been completed.
 *
 * markup: components/process-diagram/scss/process-steps/example
 */

@mixin radius-component-process-steps {
  $circle-size: 1.5rem;
  $complete-color: get-color(green, base);
  $active-color: get-color(purple, contrast);
  $incomplete-color: get-color(grey, x-light);
  $line-thickness: 2px;
  $compact-layout: tablet-medium;
  $text-bottom-spacing: 1rem;


  .process-steps {
    position: relative;

    display: table;
    width: 100%;
    padding: 0;
    margin: 0;

    text-align: center;

    list-style: none;

    table-layout: fixed;

    counter-reset: process-steps;


    @supports (display: flex) {
      display: flex;
      flex-wrap: nowrap;
      justify-content: space-between;
    }


    &::before {
      position: absolute;
      bottom: $circle-size / 2;
      left: 0;

      display: none;
      width: 100%;
      height: $line-thickness;

      background-color: $incomplete-color;

      content: "";


      @supports (display: flex) {
        display: block;
      }
    }
  }


  .process-steps__item {
    position: relative;

    display: table-cell;
    width: 1%;

    color: $incomplete-color;

    vertical-align: bottom;


    @supports (display: flex) {
      display: flex;
      align-content: flex-end;
      flex: 1;
      flex-wrap: wrap;
      width: auto;
    }


    &::after {
      @include font(small, false);

      position: relative;
      top: (-1) * $line-thickness;
      z-index: 1;

      display: block;
      width: $circle-size;
      height: $circle-size;
      margin: 0 auto;

      font-weight: bold;
      line-height: calc(#{$circle-size} - #{2 * $line-thickness});
      color: $incomplete-color;
      text-align: center;

      background-color: get-color(white);
      border: $line-thickness solid;
      border-radius: 50%;

      content: counter(process-steps);
      counter-increment: process-steps;
    }


    &.is-complete {
      &::after {
        color: $complete-color;
      }
    }


    &.is-active {
      &::after {
        color: $active-color;
      }


      .process-steps__content {
        font-weight: bold;
      }
    }
  }

  .process-steps__content {
    position: relative;

    width: 100%;
    padding-right: 0.5rem;
    padding-bottom: $text-bottom-spacing;
    padding-left: 0.5rem;


    @include from (mobile-medium) {
      padding-right: 1rem;
      padding-left: 1rem;
    }


    @include from ($compact-layout) {
      padding-right: 1.5rem;
      padding-left: 1.5rem;
    }


    &::after {
      position: absolute;
      right: 50%;
      bottom: $circle-size / (-2);

      z-index: 0;

      width: 100%;
      height: $line-thickness;

      background-color: $incomplete-color;

      content: "";
    }
  }

  .process-steps__item:first-child .process-steps__content::after {
    width: 50%;
  }


  .process-steps__item.is-complete .process-steps__content::after {
    background-color: $complete-color;
  }


  .process-steps__item.is-active .process-steps__content::after {
    background-color: $active-color;
  }
}
