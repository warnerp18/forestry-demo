/**
 * section: M2DM/components/process-diagram/process-diagram
 * title: Process diagram
 *
 * activateComponent: radius-component-process-diagram
 *
 * abstractLink: 0ef69164-c5c8-491b-8d3a-f470cae0cb72
 *
 * description: |
 *   It does not highlight individual, disconnected benefits like a feature list but rather helps describe the user's journey and show the process as a whole.
 *
 *   The default status is the vertical alignement of the numbers, with a `--responsive` variant allowing for the content to flow responsively on the page with the numbers horizontally aligned.<br><br>
 *
 *   **Warning**: if a browser does not support rem units, the content might be obscured.
 *
 * markup: components/process-diagram/scss/process-diagram/example
 */

@import "./functions/half";

@mixin radius-component-process-diagram {
  $circle-size: 1.5rem;
  $brand-color: get-color(purple, contrast);
  $line-thickness: 2px;
  $item-vspace: vspace(small);
  $compact-layout: tablet-medium;
  $comfortable-layout: desktop-small;
  $minimum-column-size: 16rem;


  .process-diagram {
    padding: 0;
    margin: 0;

    list-style: none;

    counter-reset: process-diagram;
  }


  .process-diagram__container {
    position: relative;


    padding-right: 1rem;
    padding-left: 2rem;
    margin-bottom: $item-vspace;
  }


  // circles
  .process-diagram__container { // stylelint-disable-line no-duplicate-selectors
    &::before {
      @include font(small, false);

      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;

      display: block;
      width: $circle-size;
      margin: 0 auto;

      font-weight: bold;
      line-height: calc(#{$circle-size} - #{2 * $line-thickness});
      color: $brand-color;
      text-align: center;

      background-color: get-color(white);
      border: $line-thickness solid;
      border-radius: 50%;

      content: counter(process-diagram);
      counter-increment: process-diagram;
    }
  }


  // line connecting the circles
  @supports (display: flex) {
    .process-diagram__container { // stylelint-disable-line no-duplicate-selectors
      &::after {
        position: absolute;
        z-index: 0;

        background-color: $brand-color;

        content: "";
      }


      &:not(:last-child)::after {
        top: $circle-size;
        left: calc(#{half($circle-size)} - #{half($line-thickness)});

        width: $line-thickness;
        height: 100%;
      }
    }
  }


  .process-diagram--responsive {
    @include from($compact-layout) {
      display: table;
      width: 100%;
      margin-bottom: $item-vspace;

      table-layout: fixed;


      .process-diagram__content {
        max-width: $minimum-column-size;

        margin: 0 auto;

        text-align: center;
      }
    }


    @supports (display: flex) {
      @include breakpoint(from $compact-layout) {
        display: flex;
        flex-wrap: wrap;
      }


      @include from($comfortable-layout) {
        flex-wrap: nowrap;
      }
    }
  }


  .process-diagram--responsive .process-diagram__container {
    &::before {
      @include breakpoint(from $compact-layout) {
        left: calc(50% - #{half($circle-size)});
      }
    }


    @include from($compact-layout) {
      display: table-cell;
      width: 1%;
      padding-top: 2.5rem;
      padding-left: 1rem;
      margin-bottom: initial;
    }


    @supports (display: flex) {
      @include breakpoint(from $compact-layout to $comfortable-layout) {
        width: 50%;
        padding-top: 0;


        &:nth-child(even)::before {
          top: -1 * half($circle-size);
        }


        &:nth-child(odd)::before {
          top: auto;
          bottom: -1 * half($circle-size);
        }


        &:nth-last-child(n+4),
        &:nth-last-child(n+4) ~ .process-diagram__container {
          width: 40%;
        }


        &:nth-child(even) {
          left: 25%;

          padding-top: $item-vspace;
        }


        &:nth-last-child(n+4) ~ :nth-child(even) {
          left: 20%;
        }


        &:nth-child(2) {
          order: 3;
        }


        &:nth-child(3) {
          order: 2;
        }


        &:nth-child(n+4) {
          order: 4;
        }


        &:nth-child(odd) {
          padding-bottom: $item-vspace;
        }
      }


      @include from($comfortable-layout) {
        flex-grow: 1;
        padding-top: 2.5rem;
      }


      // connect the lines
      @include breakpoint(from $compact-layout to $comfortable-layout) {
        &:nth-child(even):not(:last-child)::after {
          top: -1 * half($line-thickness);
        }


        &:nth-child(odd):not(:last-child)::after {
          top: inherit;
          bottom: -1 * half($line-thickness);
        }
      }


      @include breakpoint(from $compact-layout) {
        &:not(:last-child)::after {
          left: 50%;

          width: 50%;
          height: $line-thickness;
        }
      }


      @include from($comfortable-layout) {
        &:not(:last-child)::after {
          top: half($circle-size);

          width: 100%;
        }
      }
    }
  }
}
