/**
 * section: M2DM/components/dropdown
 * title: Dropdown
 *
 * activateComponent: radius-component-dropdown
 *
 * abstractLink: 97651dc3-42e3-491a-b266-4bdcc85e7c0a
 *
 * purpose: Use to summon options that are related to a single theme or concept that would be too numerous to list in view all at once.
 *
 * description: |
 *   It consists of a clickable toggle and a hidden dropdown window which holds the additional content. Clicking the toggle element(the one visible on the page) will make the dropdown window appear.
 *   
 *   In some contexts, the dropdown component contains an icon in front of each option. In this case the component requires the modifier class: `dropdown--with-icons` responsible for maintaing the space consistent between the icon and the dropdown option.
 *   
 *   The component makes use of the toggler functionality which can be found here: `globals/js/toggle`.
 *
 *   ### Environment specific behaviour:
 *   When JavaScript is not available the hidden content in the dropdown window will not be visible.
 *
 *   ### Data attributes:
 *   - `[data-js-toggle]`: This attribute should be added to the dropdown wrapper.
 *   - `[data-js-toggle-switch]`: This attribute should be added to the element responsible for toggling the dropdown window display.
 *
 * markup: components/dropdown/example
 */

@mixin radius-component-dropdown {
  $tooltip-square-diagonal: 1.235rem;
  $menu-item-left-padding: 1rem;
  $switch-icon-width: 1.5rem;
  $switch-icon-vspace: 0.5rem;
  $accent-color: get-color(orange, contrast);
  $dropdown-menu-color: get-color(grey, 2x-light);

  .dropdown {
    position: relative;
    
    max-width: 18rem;
  }


  .dropdown__selected-item {
    position: relative;

    margin-right: 0.5rem;

    cursor: pointer;


    // Window's tooltip
    &::after {
      @include z-index(nav, 2, absolute);

      top: 100%;
      right: calc((#{$switch-icon-width} + 1px) * (-1));

      display: none;
      width: 0.875rem;
      height: 0.875rem;
      
      // stylelint-disable declaration-property-unit-whitelist
      margin-top: calc(#{$tooltip-square-diagonal/2} - 1px); // the border width needs to be extracted from margin;
      // stylelint-enable

      background-color: get-color(white);
      border-top: 1px solid $dropdown-menu-color;
      border-left: 1px solid $dropdown-menu-color;
      border-top-left-radius: 6px;
      
      content: "";
      transform: rotate(45deg);
    }
  }


  .dropdown__selected-option {
    line-height: 1;
    
    white-space: nowrap;


    &:focus {
      outline: none;
    }
  }


  .dropdown__selected-option > * {
    vertical-align: middle;
  }


  .dropdown__menu {
    @include z-index(nav, 1, absolute);

    top: 100%;
    left: 0;

    display: none;
    width: 18rem;

    padding: 1rem 0;
    margin-top: 1rem;
    margin-bottom: 0;

    text-align: left;

    list-style: none;

    background-color: get-color(white);
    border: 1px solid $dropdown-menu-color;
    border-radius: 5px;

    box-shadow: 0 2px 4px rgba(get-color(black), 0.2);
  }


  .dropdown__menu > * {
    &:not(:last-child) {
      margin-bottom: 0.5rem;
    }
  }


  .dropdown__menu-item {
    @include font(medium);
    
    display: block;

    padding-left: $menu-item-left-padding;

    color: get-color(grey, light);


    &:hover {
      color: $accent-color;
    }


    &:focus {
      padding-left: calc(#{$menu-item-left-padding} - 2px); // stylelint-disable declaration-property-unit-whitelist

      color: get-color(grey, contrast);

      border-left: 2px solid $accent-color;
    }
  }


  .dropdown__menu-item > * {
    vertical-align: middle;
  }


  .dropdown.is-active {
    .dropdown__menu {
      display: block;
    }


    .dropdown__selected-item {
      &::after {
        display: block;
      }
    }
  }


  .dropdown--with-icons {
    .dropdown__icon {
      margin-right: 0.5rem;
    }
  }
}
