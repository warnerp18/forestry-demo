import scrollTo from '../index';

describe('scrollTo', () => {
  const fixture = `
    <form>
      <a id="link-without-href" data-js-scrollto>Click me!</a>
      <a id="link-with-no-target" href="#target-does-not-exist" data-js-scrollto>Click me!</a>
      <a id="link-with-href" href="#target-exists" data-js-scrollto>Click me!</a>
      <button id="button" type="button" data-js-scrollto="#target-exists">Click me!</button>
      <div id="target-exists">Scroll to me!</div>
    </form>
  `;

  const scrollIntoViewOptions = { block: 'start', behavior: 'smooth' };

  let buttonWithTarget;
  let linkWithoutHref;
  let linkWithNoTarget;
  let linkWithHref;
  let targetWithHref;

  beforeEach(() => {
    document.body.innerHTML = fixture;

    buttonWithTarget = document.querySelector('#button');
    linkWithoutHref = document.querySelector('#link-without-href');
    linkWithNoTarget = document.querySelector('#link-with-no-target');
    linkWithHref = document.querySelector('#link-with-href');
    targetWithHref = document.querySelector('#target-exists');

    scrollTo();
  });

  describe('the cta does not have [href] attribute set', () => {
    describe('and the data attribute has a target ID set', () => {
      let clickEvent;

      beforeEach(() => {
        clickEvent = new Event('click');

        spyOn(clickEvent, 'preventDefault');

        targetWithHref.scrollIntoView = jasmine.createSpy('scrollIntoView');

        buttonWithTarget.dispatchEvent(clickEvent);
      });

      it('does not prevent the default behaviour for a non-anchor', () => {
        expect(clickEvent.preventDefault).not.toHaveBeenCalled();
      });

      it('scrolls to the target element', () => {
        expect(targetWithHref.scrollIntoView).toHaveBeenCalledWith(scrollIntoViewOptions);
      });
    });

    describe('and the data attribute does not have a target ID set', () => {
      it('adds the `is-hidden` class on the CTA', () => {
        expect(linkWithoutHref.classList.contains('is-hidden')).toBe(true);
      });
    });
  });

  describe('the target selector does not exist', () => {
    it('adds the `is-hidden` class on the CTA', () => {
      expect(linkWithNoTarget.classList.contains('is-hidden')).toBe(true);
    });
  });

  describe('when clicking on the link and the [href] is a valid ID selector', () => {
    let clickEvent;

    beforeEach(() => {
      clickEvent = new Event('click');

      spyOn(clickEvent, 'preventDefault');

      targetWithHref.scrollIntoView = jasmine.createSpy('scrollIntoView');

      linkWithHref.dispatchEvent(clickEvent);
    });

    it('prevents default behaviour for the link', () => {
      expect(clickEvent.preventDefault).toHaveBeenCalled();
    });

    it('scrolls to the target element', () => {
      expect(targetWithHref.scrollIntoView).toHaveBeenCalledWith(scrollIntoViewOptions);
    });
  });
});
