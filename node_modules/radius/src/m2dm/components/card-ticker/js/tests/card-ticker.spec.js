import cardTicker from '../index';

describe('cardTicker', () => {
  let response;

  beforeEach(() => {
    const fixture = `
      <div data-js-card-ticker>
        <div data-js-card-ticker-carousel></div>
      </div>
    `;

    response = `
      John in London borrowed *£450,000* to *refurbish*
      Denny in Harrow borrowed *£75,000* to *purchase*
      `.trim();

    document.body.innerHTML = fixture;
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  describe('when a request for data was made and the response was successful', () => {
    let cardTickerElement;
    let cardTickerItems;
    let cardItemContent;

    beforeEach((done) => {
      const fetchResponse = getWindowResponse(response);

      spyOn(window, 'fetch').and.returnValue(Promise.resolve(fetchResponse));

      cardTicker();

      window.requestIdleCallback(() => {
        cardTickerElement = document.querySelector('[data-js-card-ticker-carousel]');
        cardTickerItems = cardTickerElement.querySelectorAll('[data-js-card-ticker-item]');
        cardItemContent = cardTickerElement.querySelectorAll('.card-ticker__item-content');
        done();
      });
    });

    it('populates the card-ticker with the correct number of card items', () => {
      expect(cardTickerItems.length).toBe(2);
    });

    it('displays correct html markup', () => {
      const itemMarkup = Array.from(cardItemContent).map(item => item.innerHTML);
      const formattedMarkup = [
        'John in London borrowed <strong>£450,000</strong> to <strong>refurbish</strong>',
        'Denny in Harrow borrowed <strong>£75,000</strong> to <strong>purchase</strong>',
      ];

      expect(itemMarkup).toEqual(formattedMarkup);
    });

    describe('when the animation iterates', () => {
      let firstItem;

      beforeEach(() => {
        [firstItem] = cardTickerItems;
        cardTickerElement.dispatchEvent(new Event('animationiteration'));
        cardTickerItems = cardTickerElement.querySelectorAll('[data-js-card-ticker-item]');
      });

      it('removes the first item from the card-ticker', () => {
        expect(cardTickerElement.firstElementChild.isEqualNode(firstItem)).toBe(false);
      });

      it('moves the first item at the end of the card-ticker', () => {
        expect(cardTickerElement.lastElementChild.isEqualNode(firstItem)).toBe(true);
      });
    });
  });

  describe('when a request for data was made and the response was unsuccessful', () => {
    let cardTickerElement;

    beforeEach((done) => {
      spyOn(window, 'fetch').and.returnValue(Promise.resolve(getWindowResponse('error', 403)));

      cardTicker();

      window.requestIdleCallback(() => {
        cardTickerElement = document.querySelector('[data-js-card-ticker-carousel]');
        done();
      });
    });

    it('removes the card-ticker from the page', () => {
      expect(cardTickerElement).toBe(null);
    });
  });
});

function getWindowResponse(text, status = 200) {
  return new window.Response(text, {
    status,
    headers: {
      'Content-type': 'text/plain',
    },
  });
}
