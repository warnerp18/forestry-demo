import reducer from '../reducer';
import { updateLoanAmountAction, updateTermAction } from '../actions';

describe('reducer', () => {
  let state;
  let result;
  describe('When reducer is called with update amount action', () => {
    beforeEach(() => {
      state = {
        minLoanAmount: 5000,
        maxLoanAmount: 10000,
      };
    });
    describe('and amount is less than minimum', () => {
      it('should return state with less than error message', () => {
        expect(reducer(state, updateLoanAmountAction(23))).toEqual({
          disabled: true,
          errorMessage: 'amount is below minimum allowed',
          loanAmount: 23,
          minLoanAmount: 5000,
          maxLoanAmount: 10000,
        });
      });
    });
    describe('and amount is greater than the maximum', () => {
      it('should return state with greater than error message', () => {
        expect(reducer(state, updateLoanAmountAction(10000000))).toEqual({
          disabled: true,
          errorMessage: 'amount is above maximum allowed',
          loanAmount: 10000000,
          minLoanAmount: 5000,
          maxLoanAmount: 10000,
        });
      });
    });
    describe('and the amount is between the minimum and maximum', () => {
      it('should return state with no error message', () => {
        expect(reducer(state, updateLoanAmountAction(6767))).toEqual({
          disabled: false,
          errorMessage: '',
          loanAmount: 6767,
          minLoanAmount: 5000,
          maxLoanAmount: 10000,
        });
      });
    });
  });
  describe('When reducer is called with update term action', () => {
    it('should return new state', () => {
      state = {
        bar: 'bar',
      };
      result = reducer(state, updateTermAction(12));
      expect(result).toEqual({
        loanTerm: 12,
        bar: 'bar',
      });
    });
  });
});
