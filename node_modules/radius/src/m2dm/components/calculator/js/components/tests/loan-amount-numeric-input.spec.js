import React from 'react';
import { shallow } from 'enzyme';
import NumberFormat from 'react-number-format';

import LoanAmountNumericInput from '../loan-amount-numeric-input';

describe('LoanAmountNumericInput component', () => {
  let inputWrapper;
  describe('when the user inputs a value into the field', () => {
    it('should update the amount', () => {
      const spyOnUpdateLoanAmount = jasmine.createSpy('spy-on-update-loan-amount');

      inputWrapper = shallow(
        <LoanAmountNumericInput updateLoanAmount={ spyOnUpdateLoanAmount }/>,
      );

      inputWrapper.find(NumberFormat).props().onValueChange({
        value: '1234',
      });
      expect(spyOnUpdateLoanAmount).toHaveBeenCalledWith(1234);
    });
  });

  describe('and there is an error message', () => {
    beforeEach(() => {
      inputWrapper = shallow(
        <LoanAmountNumericInput errorMessage={'the value you added is too low'}/>,
      );
    });

    it('should show the too low error message', () => {
      expect(inputWrapper.find('[data-test-error-message]').text())
        .toBe('the value you added is too low');
    });
  });

  describe('when the user inputs a value', () => {
    let spyOnUpdateLoanAmount;
    beforeEach(() => {
      spyOnUpdateLoanAmount = jasmine.createSpy('spy-on-update-loan-amount');

      inputWrapper = shallow(
        <LoanAmountNumericInput updateLoanAmount={ spyOnUpdateLoanAmount }/>,
      );

      inputWrapper.find(NumberFormat).props().onValueChange({ value: 10000 });
    });
    it('should be called with a value of 10000', () => {
      expect(spyOnUpdateLoanAmount).toHaveBeenCalledWith(10000);
    });
  });
});
