import React from 'react';
import { mount } from 'enzyme';
import { Provider } from 'react-redux';
import { createStore } from 'redux';

import reducer from '../../reducer';
import Calculator from '../calculator';

describe('Calculator component', () => {
  let calculator;

  const defaultState = {
    loanAmount: 250000,
    loanTerm: 36,
    minLoanAmount: 5000,
    disabled: false,
    maxLoanAmount: 1000000,
    locale: 'en-GB',
    termLengths: [6, 12, 24, 36, 48, 60],
  };

  beforeEach(() => {
    const store = createStore(reducer, defaultState);
    calculator = mount(<Provider store={ store }><Calculator /></Provider>);
  });
  describe('when the component is rendered', () => {
    it('should display default values', () => {
      expect(getInputAmount().props().value).toBe('£250,000');
      expect(getRangeAmount().props().value).toBe(250000);
      expect(getTermLength().props().value).toBe(36);
      expect(getElement('monthly-payments')).toEqual('£7,790');
      expect(getElement('total-interest')).toEqual('£21,685');
      expect(getElement('completion-fee')).toEqual('£8,750');
      expect(getElement('total-cost')).toEqual('£280,435');
      expect(calculator.find('[data-test-loan-terms]').node.disabled).toBe(false);
    });
  });
  describe('When the user inputs a number into text field', () => {
    describe('and the number is valid', () => {
      beforeEach(() => {
        changeInputValue('37000');
      });
      it('should update the range slider', () => {
        expect(getRangeAmount().props().value).toEqual(37000);
      });

      it('should update loan breakdown values', () => {
        expect(getElement('monthly-payments')).toEqual('£1,153');
        expect(getElement('total-interest')).toEqual('£3,209');
        expect(getElement('completion-fee')).toEqual('£1,295');
        expect(getElement('total-cost')).toEqual('£41,504');
      });
      it('should NOT disable the loan term selection', () => {
        expect(calculator.find('[data-test-loan-terms]').node.disabled).toBe(false);
      });
    });
    describe('and the number is less than the minimum allowed', () => {
      beforeEach(() => {
        changeInputValue('370');
      });
      it('should show less than error message', () => {
        expect(getElement('error-message')).toBe('amount is below minimum allowed');
      });
      it('should not show loan breakdown values', () => {
        expect(getElement('monthly-payments')).toEqual('-');
        expect(getElement('total-interest')).toEqual('-');
        expect(getElement('completion-fee')).toEqual('-');
        expect(getElement('total-cost')).toEqual('-');
      });
      it('should disable the loan term selection', () => {
        expect(calculator.find('[data-test-loan-terms]').node.disabled).toBe(true);
      });
    });
    describe('and the number is greater than the minimum allowed', () => {
      beforeEach(() => {
        changeInputValue('370000000000');
      });
      it('should show greater than error message', () => {
        expect(getElement('error-message')).toBe('amount is above maximum allowed');
      });
      it('should not show loan breakdown values', () => {
        expect(getElement('monthly-payments')).toEqual('-');
        expect(getElement('total-interest')).toEqual('-');
        expect(getElement('completion-fee')).toEqual('-');
        expect(getElement('total-cost')).toEqual('-');
      });
      it('should disable the loan term selection', () => {
        expect(calculator.find('[data-test-loan-terms]').node.disabled).toBe(true);
      });
    });
  });
  describe('When the user updates the range slider', () => {
    beforeEach(() => {
      changeRangeValue('37000');
    });

    it('should update the input field', () => {
      expect(getInputAmount().props().value).toEqual('£37,000');
    });
    it('should update loan breakdown values', () => {
      expect(getElement('monthly-payments')).toEqual('£1,153');
      expect(getElement('total-interest')).toEqual('£3,209');
      expect(getElement('completion-fee')).toEqual('£1,295');
      expect(getElement('total-cost')).toEqual('£41,504');
    });
  });
  describe('when the user selects a new term amount', () => {
    beforeEach(() => {
      changeTermAmount(6);
    });

    it('should update loan breakdown values', () => {
      expect(getElement('monthly-payments')).toEqual('£42,848');
      expect(getElement('total-interest')).toEqual('£3,341');
      expect(getElement('completion-fee')).toEqual('£3,750');
      expect(getElement('total-cost')).toEqual('£257,091');
    });
  });

  function getElement(el) {
    return calculator.find(`[data-test-${el}]`).text();
  }

  function getInputAmount() {
    return calculator.find('input[type="text"]');
  }

  function getRangeAmount() {
    return calculator.find('input[type="range"]');
  }

  function getTermLength() {
    return calculator.find('input').filterWhere(n => n.props().checked === true);
  }

  function changeInputValue(value) {
    const textInput = getInputAmount();
    const textInputEl = textInput.get(0);
    textInputEl.value = value;
    textInput.simulate('change', { target: textInputEl });
  }

  function changeRangeValue(value) {
    const rangeInput = getRangeAmount();
    const rangeInputEl = rangeInput.get(0);
    rangeInputEl.value = value;
    rangeInput.simulate('change', { target: rangeInputEl });
  }

  function changeTermAmount(term) {
    const termLengths = calculator.find('input[type="radio"]');
    const newSelectedTerm = termLengths.findWhere(input => (input.props().value === term));
    newSelectedTerm.checked = true;
    newSelectedTerm.simulate('change', { target: { checked: true } });
  }
});
