import React from 'react';
import { shallow } from 'enzyme';
import Terms from '../terms';

describe('Terms component', () => {
  let terms;
  let spyOnTermSelected; 
  describe('when the component is rendered', () => {
    beforeEach(() => {
      spyOnTermSelected = jasmine.createSpy('spy-on-term-selected');
      terms = shallow(<Terms loanTerm={ 24 } 
          onTermSelected={ spyOnTermSelected } 
          termLengths={[6, 12, 24]}/>);
    });
    it('should render terms', () => {
      expect(terms.find('input[type="radio"]').length).toBe(3);
    });
    describe('when user selects a term', () => {
      beforeEach(() => {
        terms.find('input[type="radio"]')
          .findWhere(input => (input.props().value === 6)).simulate('change');
      });
      it('should update the term', () => {
        expect(spyOnTermSelected).toHaveBeenCalledWith(6);
      });
    });
  });
  describe('when component is disabled', () => {
    beforeEach(() => {
      terms = shallow(<Terms disabled={ true } termLengths={[1, 2]}/>); 
    });
    it('should disable fieldset', () => {
      expect(terms.find('fieldset').props().disabled).toBe(true); 
    });
  });
});
