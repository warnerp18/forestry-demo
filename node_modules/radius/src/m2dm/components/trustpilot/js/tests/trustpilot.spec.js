/* eslint-disable max-len */
import fetchMock from 'fetch-mock';
import trustpilot from '../index';

describe('trustpilot', () => {
  const fixture = `
    <section data-js-trustpilot-api>
      <span data-js-trustpilot-headline-rating data-content-4stars="Great" data-content-5stars="Excellent"></span>
      <span data-js-trustpilot-stars></span>
      <span data-js-trustpilot-review-count></span>
      <span data-js-trustpilot-trustscore></span>
    </section>
  `;

  describe('getLocalData function', () => {
    beforeEach(() => {
      localStorage.removeItem('trustpilot_api_data');
      localStorage.removeItem('trustpilot_api_data_last_updated');
    });
    
    it('returns falsy values if there are no localstorage values set', () => {
      const { getLocalData } = trustpilot();
      const { localData, localDataExpired } = getLocalData();
      expect(localData).toBeNull();
      expect(localDataExpired).toEqual(false);
    });
    
    it('returns data value, and an expired boolean, if data has been set', () => {
      const { setLocalData, getLocalData } = trustpilot();

      const testData = {};
      testData.hello = 'imatest';
      setLocalData(testData);
      
      const { localData, localDataExpired } = getLocalData();
      expect(localData).toEqual(testData);
      expect(localDataExpired).toEqual(false);
    });

    afterEach(() => {
      localStorage.removeItem('trustpilot_api_data');
      localStorage.removeItem('trustpilot_api_data_last_updated');
    });
  });

  describe('setLocalData function', () => {
    beforeEach(() => {
      localStorage.removeItem('trustpilot_api_data');
      localStorage.removeItem('trustpilot_api_data_last_updated');
    });
    
    it('sets the given data object as a string', () => {
      const currentData = localStorage.getItem('trustpilot_api_data');
      const currentUpdated = localStorage.getItem('trustpilot_api_data_last_updated');

      expect(currentData).toBeNull();
      expect(currentUpdated).toBeNull();

      const { setLocalData } = trustpilot();
      const testData = {};
      testData.hello = 'imatest';
      setLocalData(testData);
      
      const newData = localStorage.getItem('trustpilot_api_data');
      const newUpdated = localStorage.getItem('trustpilot_api_data_last_updated');

      expect(newData).toBe('{"hello":"imatest"}');
      expect(newUpdated).not.toBeNull();
    });

    afterEach(() => {
      localStorage.removeItem('trustpilot_api_data');
      localStorage.removeItem('trustpilot_api_data_last_updated');
    });
  });


  describe('isLocalDataExpired function', () => {
    it('returns true if data was last updated more than 1 day ago', () => {
      const { isLocalDataExpired } = trustpilot();
      const testUpdatedTimestamp = (Date.now() - 86460000); // subtract 1 day and 1 minute

      const testValue = isLocalDataExpired({}, testUpdatedTimestamp);
      expect(testValue).toEqual(true);
    });

    it('returns false if data was last updated less than 1 day ago', () => {
      const { isLocalDataExpired } = trustpilot();
      const testUpdatedTimestamp = (Date.now() - 43200000); // subtract 12 hours

      const testValue = isLocalDataExpired({}, testUpdatedTimestamp);
      expect(testValue).toEqual(false);
    });

    it('returns false if there is no data or there is no last updated value provided', () => {
      const { isLocalDataExpired } = trustpilot();
      const testValue1 = isLocalDataExpired();
      const testValue2 = isLocalDataExpired(null, Date.now());
      const testValue3 = isLocalDataExpired({});

      expect(testValue1).toEqual(false);
      expect(testValue2).toEqual(false);
      expect(testValue3).toEqual(false);
    });
  });
  
  
  describe('fetchTrustPilotData function', () => {
    it('should return a promise', () => {
      const { fetchTrustPilotData } = trustpilot();
      const promise = fetchTrustPilotData();
      expect(typeof promise.then).toEqual('function');
    });

    it('should resolve the promise with some data from the TrustPilot API', (done) => {
      const { fetchTrustPilotData } = trustpilot();
      
      const fakeData = {};
      fakeData.hello = 'world';
      fetchMock.get('*', fakeData);
      
      fetchTrustPilotData()
        .then((data) => {
          expect(data).toEqual(fakeData);
          fetchMock.restore();
          done();
        });
    });

    afterEach(() => {
      localStorage.removeItem('trustpilot_api_data');
      localStorage.removeItem('trustpilot_api_data_last_updated');
    });
  });


  describe('renderTrustPilotComponents function', () => {
    let apiWidgets;
    
    beforeEach(() => {
      document.body.innerHTML = fixture;

      apiWidgets = Array.from(document.querySelectorAll('[data-js-trustpilot-api]'));
    });
    
    it('should remove the entire widget if star rating is 3 or less', () => {
      const numComponents = document.querySelectorAll('[data-js-trustpilot-api]');
      expect(numComponents.length).toBe(1);
      
      const testData = {};
      testData.stars = 3;
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      
      const newNumComponents = document.querySelectorAll('[data-js-trustpilot-api]');
      expect(newNumComponents.length).toBe(0);
    });

    it('should add the correct number of span.trustpilot__star elements into any [data-js-trustpilot-stars] elements ', () => {
      const testData = {};
      testData.stars = 5;
      testData.numberOfReviews = {};
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      
      const container = document.querySelector('[data-js-trustpilot-stars]');
      const stars = container.querySelectorAll('span.trustpilot__star');
      expect(stars.length).toBe(5);
    });

    it('should change content of [data-js-trustpilot-review-count] elements with the right value', () => {
      const testData = {};
      testData.numberOfReviews = {};
      testData.numberOfReviews.total = 563;
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      
      const reviewCount = document.querySelector('[data-js-trustpilot-review-count]');
      expect(reviewCount.innerText).toBe('563');
    });

    it('should change content of [data-js-trustpilot-trustscore] elements with the right value', () => {
      const testData = {};
      testData.numberOfReviews = {};
      testData.trustScore = 9.2;
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      
      const trustscore = document.querySelector('[data-js-trustpilot-trustscore]');
      expect(trustscore.innerText).toBe('9.2');
    });

    it('should change content of [data-js-trustpilot-headline-rating] elements with the 5 star value', () => {
      const testData = {};
      testData.numberOfReviews = {};
      testData.stars = 5;
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      
      const headline = document.querySelector('[data-js-trustpilot-headline-rating]');
      expect(headline.innerText).toBe('Excellent');
    });

    it('should change content of [data-js-trustpilot-headline-rating] elements with the 4 star value', () => {
      const testData = {};
      testData.numberOfReviews = {};
      testData.stars = 4;
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      
      const headline = document.querySelector('[data-js-trustpilot-headline-rating]');
      expect(headline.innerText).toBe('Great');
    });

    it('should add the class is-visible to the widget once it has rendered', () => {
      const testData = {};
      testData.numberOfReviews = {};
      testData.stars = 5;
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);

      expect(apiWidgets[0].className).toContain('is-visible');
    });

    it('should display the correct number of span.trustpilot__star elements into any [data-js-trustpilot-stars] elements when called multiple times', () => {
      const testData = {};
      testData.stars = 5;
      testData.numberOfReviews = {};
      const { renderTrustPilotComponents } = trustpilot();
      renderTrustPilotComponents(testData, apiWidgets);
      renderTrustPilotComponents(testData, apiWidgets);

      const container = document.querySelector('[data-js-trustpilot-stars]');
      const stars = container.querySelectorAll('span.trustpilot__star');
      expect(stars.length).toBe(5);
    });
  });


  describe('start function', () => {
    beforeEach(() => {
      document.body.innerHTML = fixture;
    });

    it('should remove all instances of the component if there is an API error', (done) => {
      const numComponents = document.querySelectorAll('[data-js-trustpilot-api]');
      expect(numComponents.length).toBe(1);

      fetchMock.get('*', 403);
      const { start } = trustpilot();
      start();

      // wrap in a setTimeout so that the expect happens on the tick after the fetch promise returns
      window.setTimeout(() => {
        const newNumComponents = document.querySelectorAll('[data-js-trustpilot-api]');
        expect(newNumComponents.length).toBe(0);

        fetchMock.restore();
        done();
      }, 1);
    });
  });
});
