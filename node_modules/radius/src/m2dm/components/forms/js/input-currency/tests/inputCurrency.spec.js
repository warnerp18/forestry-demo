import inputCurrency from '..';

describe('inputCurrency', () => {
  const fixture = `
    <form>
      <input
        type="text"
        data-js-currency
        data-js-currency-min="20000.12"
        data-js-currency-max="50000.12"
        data-js-currency-locale="en-gb"
        data-js-currency-format="$0,0[.]00"
      />
    </form>
  `;
  let input;

  beforeEach(() => {
    document.body.innerHTML = fixture;
    input = document.querySelector('[data-js-currency]');
  });

  describe('on initial render', () => {
    describe('if a value is not present', () => {
      beforeEach(() => {
        inputCurrency();
      });

      it('does nothing', () => {
        expect(input.value).toBe('');
      });
    });

    describe('if a value is present', () => {
      beforeEach(() => {
        input.value = '250000';

        inputCurrency();
      });

      it('should format the value if a value is present', () => {
        expect(input.value).toBe('£250,000');
      });
    });
  });

  describe('when the user changes the input', () => {
    beforeEach(() => {
      input.value = '250000';

      inputCurrency();
    });

    describe('input has a min', () => {
      describe('input value is smaller than the min value', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '100.05');
        });

        it('adds the is-invalid class', () => {
          expect(input.classList.contains('is-invalid')).toBe(true);
        });
      });

      describe('input value is larger than or equal to the min value', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '20000.12');
        });

        it('adds the is-valid class', () => {
          expect(input.classList.contains('is-valid')).toBe(true);
        });

        it('does not add the is-invalid class', () => {
          expect(input.classList.contains('is-invalid')).toBe(false);
        });
      });
    });


    describe('input has a max', () => {
      describe('input value is larger than the max value', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '50000.13');
        });

        it('adds the is-invalid class', () => {
          expect(input.classList.contains('is-invalid')).toBe(true);
        });
      });

      describe('input value is smaller than or equal to the max value', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '50000.12');
        });

        it('adds the is-valid class', () => {
          expect(input.classList.contains('is-valid')).toBe(true);
        });

        it('does not add the is-invalid class', () => {
          expect(input.classList.contains('is-invalid')).toBe(false);
        });
      });
    });

    describe('the value is not a valid format', () => {
      beforeEach(() => {
        setValueAndTriggerEvent(input, 'abcad');
      });

      it('adds the is-invalid class', () => {
        expect(input.classList.contains('is-invalid')).toBe(true);
      });

      describe('the value is changed to be valid', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '25800');
        });

        it('adds the is-valid class', () => {
          expect(input.classList.contains('is-valid')).toBe(true);
        });

        it('removes the is-invalid class', () => {
          expect(input.classList.contains('is-invalid')).toBe(false);
        });
      });
    });

    describe('the value is a valid format', () => {
      beforeEach(() => {
        setValueAndTriggerEvent(input, '21500.12');
      });

      it('returns the currency formatted value', () => {
        expect(input.value).toBe('£21,500.12');
      });

      it('adds the is-valid class', () => {
        expect(input.classList.contains('is-valid')).toBe(true);
      });

      describe('and it is larger than 999,999,999,999', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '1,999,999,999,999');
        });

        it('does not allow the extra digit', () => {
          expect(input.value).toBe('£199,999,999,999');
        });
      });

      describe('the value is changed to be invalid', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, 'abcd');
        });

        it('removes the is-valid class', () => {
          expect(input.classList.contains('is-valid')).toBe(false);
        });

        it('adds the is-invalid class', () => {
          expect(input.classList.contains('is-invalid')).toBe(true);
        });
      });
    });

    describe('when a key is pressed', () => {
      beforeEach(() => {
        setValueAndTriggerEvent(input, '1234');
      });

      describe('and the caret is moved to a different position in the input', () => {
        beforeEach(() => {
          input.setSelectionRange(2, 2);

          const event = new Event('keypress', {
            bubbles: true,
          });

          input.dispatchEvent(event);
        });

        it('keeps the caret position', () => {
          expect(input.selectionStart).toBe(2);
        });
      });

      describe('and that key is the decimal place', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '1234.');
        });

        it('does not trigger the formatting', () => {
          expect(input.value).toBe('1234.');
        });
      });

      describe('and that key is 0 followed by a decimal place', () => {
        beforeEach(() => {
          setValueAndTriggerEvent(input, '1234.0');
        });

        it('does not trigger the formatting', () => {
          expect(input.value).toBe('1234.0');
        });
      });
    });
  });
});

function setValueAndTriggerEvent(element, value) {
  element.value = value;

  const event = new Event('input', {
    bubbles: true,
  });

  element.dispatchEvent(event);
}
