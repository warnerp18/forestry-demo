// stylelint-disable declaration-no-important

/**
 * section: M2DM/developer/utility-classes
 * title: Utility classes
 *
 * purpose: Use to help reduce duplication of repeated styles.
 *
 * description: Helpful, single responsibility classes for adding particular behavior and styling to your elements. These classes must use the `!important` rule to fix specificity issues.
 */

/**
 * section: M2DM/developer/utility-classes/alignment
 * title: Alignment
 *
 * description: |
 *   Modify an element with one of the utility classes to assist with alignment issues:
 *      - `u-text-center`: updates the text alignment of an element to center
 *      - `u-text-right`: updates the text alignment of an element to right
 *      - `u-block-center`: updates the horizontal alignment of a block element to center
 *      - `u-valign-center`: use this class on the container to align items in the middle of the cross axis (top to bottom). This class applies to the parent vertically centers items using Flexbox and the `align-items` property (N.B. Flexbox is not supported in IE9 and below).
 *      - `u-float-left`: floats the element left
 *      - `u-float-right`: floats the element right
 *      - `u-clear-both`: clears float for both sides
 *
 * layout: globals/scss/init/utility-classes/alignment
 */


.u-block-center {
  margin-right: auto !important;
  margin-left: auto !important;
}


.u-text-center {
  text-align: center !important;
}


.u-text-right {
  text-align: right !important;
}


.u-valign-center {
  display: flex !important;

  align-items: center !important;
}


.u-float-left {
  float: left !important;
}


.u-float-right {
  float: right !important;
}


.u-clear-both {
  &::after {
    display: table;
    clear: both !important;

    content: "";
  }
}


/**
 * section: M2DM/developer/utility-classes/modifiers
 * title: Modifiers
 *
 * description: |
 *    Modify an element with one of the utility classes:
 *      - `u-whitespace-nowrap`: this class suppresses line breaks (text wrapping)
 *      - `u-text-uppercase`: this class transforms text to uppercase
 *      - `u-color-white`: this class transforms the colour of a component to white when sitting on dark backgrounds
 *      - `u-color-inherit`: this class inherits the colour from the closest parent that defines a colour
 *
 * markup: globals/scss/init/utility-classes/modifiers
 */

.u-text-uppercase {
  text-transform: uppercase !important;
}


.u-color-white {
  color: get-color(white) !important;
}


.u-color-inherit {
  color: inherit !important;
}


.u-whitespace-nowrap {
  white-space: nowrap !important;
}


/**
 * section: M2DM/developer/utility-classes/themes
 * title: Themes
 *
 * description: |
 *    Modify an element with one of the below theme utility classes to update the background colour of a section using colours defined in our colour palette (see: `rules/colors`):
 *
 * modifiers:
 *   u-theme-default: get-color(white)
 *   u-theme-contrast: get-color(grey, 4x-light)
 *   u-theme-accent: get-color(orange, 2x-light)
 *   u-theme-action: get-color(blue, 2x-light)
 *   u-theme-brand: get-color(purple)
 *   u-theme-brand-light: get-color(purple, 3x-light)
 *   u-theme-impact: get-color(grey, contrast)
 *
 * markup: globals/scss/init/utility-classes/themes
 */

.u-theme-default {
  background-color: get-color(white) !important;
}


.u-theme-contrast {
  background-color: get-color(grey, 4x-light) !important;
}


.u-theme-accent {
  background-color: get-color(orange, 2x-light) !important;
}


.u-theme-action {
  background-color: get-color(blue, 2x-light) !important;
}


.u-theme-brand {
  background-color: get-color(purple) !important;
}


.u-theme-brand-light {
  background-color: get-color(purple, 3x-light) !important;
}


.u-theme-impact {
  background-color: get-color(grey, contrast) !important;
}


/**
 * section: M2DM/developer/utility-classes/spacing
 * title: Spacing
 *
 * description: |
 *   Utility class helpers to adjust vertical spacing.
 *   
 *   These spacing utility classes are for convenience in laying out components within a page in beside or within other components.
 *   
 *   Classes prefixed with `.u-m` are for adding margins, whereas classes prefixed with `.u-p` are for adding padding.
 *   
 *   Directions available for the spacing classes are top and bottom. The vertical shortcut (`v`) adds padding to the top **and** bottom - to apply padding between sections. 
 *   
 *   Note: these are not to be used to adjust the spacing within individual components - as the default margins and padding have already been set, these are designed for use between individual components to add a comfortable amount of spacing.
 *   
 *   | Letter  | Description |
 *   | :------ |:----------- |
 *   | `p`     | `padding`   |
 *   | `m`     | `margin`    |
 *   | ------- | ----------- |
 *   | `v`    | vertical     |
 *   | `b`    | bottom       | 
 *   
 *   | Variant    | Units(rem) |
 *   | :--------- |:---------  |
 *   | `none`     | 0          |
 *   | `x-small`  | 0.5        |
 *   | `small`    | 1          |
 *   | `medium`   | 1.5        |
 *   | `large`    | 2          |
 *   | `x-large`  | 2.5        |
 *   | `2x-large` | 3          |
 *   | `3x-large` | 3.5        |
 *   | `4x-large` | 4          |
 *   | `5x-large` | 5          |
 *   
 *   N.B. for our 2 largest vertical spacing utility classes - `u-pv-4x-large` and `u-pv-5x-large` the padding is reduced by 2rem in both directions on smaller screens (480px and below)
 *   
 * layout: globals/scss/init/utility-classes/spacing
 */


.u-mb-none {
  margin-bottom: 0 !important;
}


.u-pv-none {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}


$spacing-unit: ( 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5 );

@for $i from 1 through length($spacing-unit) {
  $size: nth(get-config(tshirt-scale), $i);
  $value: nth($spacing-unit, $i) * 1rem;


  .u-mb-#{$size} {
    margin-bottom: $value !important;
  }


  .u-pv-#{$size} {
    padding-top: $value !important;
    padding-bottom: $value !important;
  }


  // for 4x-large and above reduce the vertical padding values by 2rem on screen sizes of 480px and below
  @if $i >= 8 {
    @include to(mobile-large) {
      .u-pv-#{$size} {
        padding-top: ($value - 2) !important;
        padding-bottom: ($value - 2) !important;
      }
    }
  }
}


// Deprecated - documentation removed to avoid continued use
.u-add-gutters {
  padding-right: 1.5rem;
  padding-left: 1.5rem;
}

// Deprecated
.u-add-gutters-responsive {
  @include from(mobile-medium) {
    padding-right: 1.5rem;
    padding-left: 1.5rem;
  }
}

/**
 * section: M2DM/developer/utility-classes/fit-content
 * title: Fit content
 *
 * description: |
 *    The dimensions of an inline element is dictated by its content; sometimes, when larger than the ones of the container they live in, these dimensions can break the bounderies of their parent container.
 *    - `u-fit` - Binds an inline element dimensions to the content area it fits in, making it resize alonside its parent container.
 *
 *
 * layout: globals/scss/init/utility-classes/fit-content
 */

.u-fit {
  display: block;
  flex-shrink: 0;
  height: auto;
  max-width: 100%;
}

/**
 * section: M2DM/developer/utility-classes/horizontal-children
 * title: Horizontal children
 *
 * description: Makes children horizontal with spacing inbetween each child
 *
 * markup: globals/scss/init/utility-classes/horizontal-children
 */

.u-horizontal-children {
  display: flex !important;

  flex-wrap: wrap !important;


  > *:not(:last-child) {
    margin-right: 1rem !important;
  }
}

// stylelint-enable
