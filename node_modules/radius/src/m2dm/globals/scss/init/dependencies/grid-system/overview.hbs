{{#*inline "grid-example"}}
  <div class="grid-example col-s-wrapper">
    <div data-unit="{{ratio1}}" class="col-s-{{ratio1}} grid-example__column"></div>
    <div data-unit="{{ratio2}}" class="col-s-{{ratio2}} grid-example__column"></div>
  </div>
{{/inline}}

<div>
  <h2 class="section-heading section-heading--medium">Overview</h2>

  <p>
    Radius is built using an asymmetric grid system based on the principle of the golden ratio. Asymmetric grids differ significantly from symmetric, n-column based approaches popularised by CSS frameworks such as Bootstrap or 960 grid.
  </p>

  <p>
    Symmetric grids are divided into N columns of equal widths, for example in case of a 12 column grid, the width of each column would be 8.33% of the parent. That is not the case however in an asymmetric grid, where the widths are based on the number of columns and the ratios between each column. See the example below between two columns of "size" 1 in both symmetric and asymmetric grid.
  </p>

  <div class="u-grid-141 u-mb-large">
    <p class="paragraph-heading paragraph-heading--small">2 columns in a symmetric grid</p>
    <div class="grid-example grid-example--symmetric u-mb-small">
      <div data-unit="1" class="grid-example__column"></div>
      <div data-unit="1" class="grid-example__column"></div>
    </div>

    <p class="paragraph-heading paragraph-heading--small">2 columns in an asymmetric grid with a ratio 1:1</p>
    {{> grid-example ratio1=1 ratio2=1}}
  </div>

  <h2 class="section-heading section-heading--medium">Thinking in asymmetric grids</h2>
  <h3 class="paragraph-heading paragraph-heading--medium">Ratios</h3>
  <p>
    Using an asymmetric grid requires a different way of thinking, thinking not in terms of tables and spanning columns but rather relations between each elements. Some layout systems use similar techniques and refer to them as 'weight based', with 'heavier columns' taking more space. This analogy, although not 100% accurate in our case, might a good stepping stone to understanding ratio based layouts.
  </p>
  <p>One counter intuitive thing which is worth highlighting is the fact that higher numbers don't necessarily change the size of the columns they generate. The column sizes are determined by the ratio between the numbers, not the magnitude of the number. Compare the following 3 cases, each using different numbers to define the same ratio.</p>

  <div class="u-grid-141 u-mb-large">
    <p class="paragraph-heading paragraph-heading--small">1:2</p>
    {{> grid-example ratio1=1 ratio2=2}}

    <p class="paragraph-heading paragraph-heading--small">3:4</p>
    {{> grid-example ratio1=3 ratio2=4}}
    <br>
    <p class="paragraph-heading paragraph-heading--small">1:5</p>
    {{> grid-example ratio1=1 ratio2=5}}
    <p class="paragraph-heading paragraph-heading--small">3:7</p>
    {{> grid-example ratio1=3 ratio2=7}}
  </div>

  <h3 class="paragraph-heading paragraph-heading--medium">Nested grids</h3>
  <p>
    The benefit of asymmetric grids becomes clear when we start nesting grids. Because the columns use ratio based sizing, not fixed sizing, nested asymmetric grids are a lot easier to reason about. Consider a nested grid scenario in a symmetric system:
  </p>
  <div class="grid-example grid-example--symmetric u-mb-small">
    <div data-unit="1" class="grid-example__column"></div>
    <div data-unit="4" class="grid-example__column grid-example__column--padded">
      <div data-unit="1" class="grid-example__column"></div>
    </div>
    <div data-unit="7" class="grid-example__column grid-example__column--padded">
      <div data-unit="1" class="grid-example__column"></div>
    </div>
  </div>
  <p>
    Even though we just said that symmetric grid systems use fixed sizing to define column widths, we can see this is not the case when the grids are nested. Unit of size 1, has a different size to a unit of size 1 nested inside a 4 and a different size to a unit nested inside a 7. This behaviour can be very counter intuitive if our mental model of the grid system is formed around the idea of fixed column widths.
  </p>

  <p>Now consider the same scenario in an asymmetric system:</p>
  <div class="grid-example col-s-wrapper u-mb-small">
    <div data-unit="1" class="col-s-1 grid-example__column"></div>
    <div data-unit="4" class="col-s-4 grid-example__column grid-example__column--padded">
      <div class="col-s-wrapper">
        <div data-unit="1" class="col-s-1 grid-example__column"></div>
      </div>
    </div>
    <div data-unit="7" class="col-s-7 grid-example__column grid-example__column--padded">
      <div class="col-s-wrapper">
        <div data-unit="1" class="col-s-1 grid-example__column"></div>
      </div>
    </div>
  </div>

  <p>
    The mental model of an asymmetric grid system hasn't been broken because we never expected the columns of size 1 to be of equal width, we expected them to be relative to other columns inside the parent. In the above example, the unnested unit of size 1 was relative to two other columns, 4 and 7. The nested units of 1 don't have any siblings and therefore automatically span the entire available space. Consider the more complex example below which demonstrates what happens when nested columns have siblings they have to share the available space with:
  </p>
  <div class="grid-example col-s-wrapper u-mb-large">
    <div data-unit="1" class="col-s-1 grid-example__column"></div>
    <div data-unit="4" class="col-s-4 grid-example__column grid-example__column--padded">
      <div class="col-s-wrapper">
        <div data-unit="1" class="col-s-1 grid-example__column"></div>
        <div data-unit="1" class="col-s-1 grid-example__column"></div>
      </div>
    </div>
    <div data-unit="7" class="col-s-7 grid-example__column grid-example__column--padded">
      <div class="col-s-wrapper">
        <div data-unit="1" class="col-s-1 grid-example__column"></div>
        <div data-unit="3" class="col-s-3 grid-example__column"></div>
      </div>
    </div>
  </div>
  <h2 class="section-heading section-heading--medium">Wrap up</h2>
  <p>
    Asymmetric grid systems allow designers to design components independently of the space in which they live thus making them more flexible and easier to reuse in different context. It takes us also a step closer towards building webpages without considering the viewport and instead relying on the browser itself to lay the components automatically in the given space and, one day, choose an appropriate layout with the help of things like container queries or minmax functions found in CSS Grid.
  </p>
</div>
