/**
 * section: M2DM/icons
 * title: Icons
 *
 * description: |
 *  Collection of symbols used to represent an object visually or to convey a particular message. Icons are consolidated into a single, external sprite to avoid multiple requests.
 *
 *
 *  ### Icon prep
 *  Take individual SVG icons provided by design (ensure they have converted strokes to outlines before exporting, or if you are exporting from the Sketch file ensure that you do this).
 *
 *  All icons should be on a transparent background. Apart from two-colour icons which should have the solid background colour set to `#75227D`.
 *
 *  Add icons to the correct folder `src/m2dm/assets/icons` and name the icon according to the following guidelines:
 *
 *  #### Naming conventions
 *  Follow the naming system to ensure consistency: [name]-[direction?]-[outline/solid?] e.g. minus, minus-circle-outline, minus-circle-solid or arrow-left (those marked with `?` are optional).
 *
 *
 *  ### HTML Usage
 *  In order to use our SVG icons, we need place them in the HTML. This means that we cannot use them in CSS background images or in pseudo elments like `::before`.
 *
 *  The name of the icon will be used as the fragment identifier when we reference it from our markup using the `<svg>` and `<use>` elements:
 *   ```
 *   <svg class="svg-icon">
 *      <use xlink:href="/radius-asset-path/icons/svg-sprite.svg#icon-name"></use>
 *   </svg>
 *   ```
 *
 *  `#icon-name` is the fragment identifier used to reference the id from the `<symbol>` element in the sprite. In the example above the #icon-name fragment identifier tells the browser to use the symbol with the ID of the same name from the `svg-sprite.svg`.
 *
 *
 *  ### Accessibility
 *  In cases where you don't want screen readers to try reading the icon out add `aria-hidden="true"` - this might be true if there is already relevant text in context and any cases where the icon is used only for decoration and/or doesn't add any signficant or additional value:
 *   ```
 *   <svg class="svg-icon" aria-hidden="true">
 *      Close
 *      <use xlink:href="/radius-asset-path/icons/svg-sprite.svg#cross-circle-outline"></use>
 *   </svg>
 *   ```
 *
 *  In cases with a link or a button whose only content is an icon use `aria-label` on the `<a>` or `<button>` element:
 *   ```
 *   <a href="#" aria-label="close">
 *      <svg class="svg-icon">
 *        <use xlink:href="/radius-asset-path/icons/svg-sprite.svg#cross-circle-outline"></use>
 *      </svg>
 *   </a>
 *   ```
 *
 *  When using SVGs outside interactive elements, like buttons and links (where `aria-label` might not be read by some screen readers), you can use the `<title>` element with a unique `id` and combine with `aria-labelledby="title-id"`:
 *   ```
 *   <svg class="svg-icon" role="img" aria-labelledby="close">
 *      <title id="close">Close modal window</title>
 *      <use xlink:href="/radius-asset-path/icons/svg-sprite.svg#cross-circle-outline"></use>
 *   </svg>
 *   ```
 *
 *  As accessibility text can change depending on context and also language - alt text should live in the same place that the icon is inserted. As such `<title>` elements are removed from the sprite as part of the sprite build process. (Also screen readers often ignore `<title>` elements from sprites). For example, a cross icon can mean close but also be used as an icon for an error notification.
 *
 *
 *  ### Visual Usage
 *  Our icons often coexist with text, so they inherit the text color and flow with the text by default.
 *
 *  Add the `.svg-icon` class to all svg icons and any modifier classes needed to change the default color and/or size.
 *
 *  #### Sizing
 *  Most icons occupy a square artboard of 24px and are set to a default size of 1rem using the `svg-icon` class as our default font size is 1rem. Icons can also be resized using the size modifier classes listed below.
 *
 *  #### Alignment
 *  Both the `svg` and any adjacent sibling element, e.g. accompanying text, are vertically aligned to the middle of the parent element's middle.
 *
 *  #### Single colour icons
 *  Default colour is `get-color(grey)`, inherited from the default colour set on the `<body>` element. Icon colour can be updated using the colour modifier classes listed below.
 *
 *  #### Two tone/colour icons
 *
 *  _Adding two tone/colour icons to Radius_<br>
 *  If you want to add a two-tone icon, set the solid background colour of icon to `#75227D`.<br><br>
 *
 *  _Using two tone/colour icons in Radius_ <br>
 *  There are a number of predefined modifier classes that can be used to set two different colours on the icon e.g. `svg-icon--solid` (see the modifiers section below to see the preset options available). Example using predefined classes:
 *
 *   ```
 *   <svg class="svg-icon svg-icon--solid-error">
 *      <use xlink:href="/radius-asset-path/icons/svg-sprite.svg#cross-circle-solid"></use>
 *   </svg>
 *   ```
 *
 *  To use two-tone icons that are not predefined use the `set-two-icon-colors` mixin (the 1st argument passed to this mixin sets the solid background color of the icon, the 2nd argument sets the color of the inner icon). Example using the mixin: `set-two-icon-colors(get-color(orange), get-color(blue));` <br><br>
 *
 *  _How two-tone icons are created_ <br>
 *  During the build process `#75227D` is replaced by `currentColor`. By setting the fill attribute of the primary (solid, background) colour of the icon to `currentColor` it will inherit whatever value is held by the `color` property. We can then set a secondary color for the inner icon, by stripping out the fill attribute during the build process and using the `fill` property to declare a different colour in CSS. CSS is used to declare both a fill and color on the SVG element (for a shortcut use the `set-two-icon-colors` mixin).
 *
 *
 *  #### Modifiers for size:
 *   `svg-icon--xsmall` - changes icon size to 0.625rem (10px)<br>
 *   `svg-icon--small` - changes icon size to 0.8125rem (13px)<br>
 *   `svg-icon--large` - changes icon size to 1.5rem (20px)<br><br>
 *
 *  #### Modifiers for color:
 *   `svg-icon--accent` - changes icon color to the contrast orange from our color palette<br>
 *   `svg-icon--action` - changes icon color to the default blue from our color palette<br>
 *   `svg-icon--disabled` - changes icon color to the x-light grey from our color palette<br>
 *   `svg-icon--inverse` - changes icon color to the white - for use on a dark background<br>
 *   `svg-icon--error` - changes icon color to default red from our color palette<br>
 *   `svg-icon--success` - changes icon color to default green from our color palette<br><br>
 *
 *   `svg-icon--solid` - for icons with two different colors, sets the background fill color of the solid SVG icons to our default text grey and the inner icon path fill to white, using the default values set by the `set-two-icon-colors` mixin<br>
 *   `svg-icon--solid-action` - for icons with a solid (action) blue fill for the background and a white inner icon<br>
 *   `svg-icon--solid-neutral` - for icons with a light grey fill for the background and a white inner icon e.g. commonly used for the info icon<br>
 *   `svg-icon--solid-error` - for icons with a solid (error) red fill for the background and a white inner icon<br>
 *   `svg-icon--solid-success` - for icons with a solid (success) green fill for the background and a white inner icon<br><br>
 *
 *   `svg-icon--cutout` - for use with solid icons that have a transparent core (inner icon) ie. the inner icon will show the colour from the background component or section that the icon lives in. Pair this class with one of the colour modifier classes (`svg-icon--action`) to change the main solid colour of the icon. **N.B.** This should only be used with solid icons.
 *
 *
 *  ### Support and polyfills
 *  Currently no versions of IE (and some older versions of WebKit browsers) supports the `use` syntax with external SVG sprite sheets (ie. file paths in `use xlink:href=""`), so we use [svgxuse](https://github.com/Keyamoon/svgxuse) - a JS polyfill - as a workaround for IE. (However, you can reference symbols from an external file in Edge). We recommend this polyfill for referencing external SVGs in `<use>` elements. It works by detecting failed external refs and loading the referenced file via AJAX, injecting the sprite into the page itself and updating the xlink:href attribute to point to this resource instead.
 *  svgxuse polyfill usage instructions can be found [here](https://github.com/Keyamoon/svgxuse#usage)
 *
 *
 * layout: globals/scss/rules/iconography/example
 *
 * markup: globals/scss/rules/iconography/example-markup
 */

@mixin set-two-icon-colors($bg-color: get-color(grey), $icon-color: get-color(white)) {
  color: $bg-color;
  fill: $icon-color;
}


.svg-icon {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  fill: currentColor;
  overflow: hidden;

  vertical-align: middle;
}


.svg-icon + * {
  vertical-align: middle;
}


.svg-icon--xsmall {
  width: 0.625rem;
  height: 0.625rem;
}


.svg-icon--small {
  width: 0.8125rem;
  height: 0.8125rem;
}


.svg-icon--large {
  width: 1.5rem;
  height: 1.5rem;
}


.svg-icon--x-large {
  width: 2rem;
  height: 2rem;
}


.svg-icon--accent {
  color: get-color(orange, contrast);
}


.svg-icon--action {
  color: get-color(blue);
}


.svg-icon--disabled {
  color: get-color(grey, x-light);
}


.svg-icon--inverse {
  color: get-color(white);
}


.svg-icon--error {
  color: get-color(red);
}


.svg-icon--success {
  color: get-color(green);
}


.svg-icon--cutout {
  fill: transparent;
}


.svg-icon--solid {
  @include set-two-icon-colors();
}


.svg-icon--solid-neutral {
  @include set-two-icon-colors(get-color(grey, x-light));
}


.svg-icon--solid-error {
  @include set-two-icon-colors(get-color(red));
}


.svg-icon--solid-success {
  @include set-two-icon-colors(get-color(green));
}


.svg-icon--solid-action {
  @include set-two-icon-colors(get-color(blue));
}
