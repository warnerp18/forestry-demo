import toggle from '../index';

beforeEach(() => {
  const fixture = `
    <div data-js-toggle id="toggle">
      <div id="toggle-switcher" data-js-toggle-switch>
        Click me!
      </div>
    </div>
    <div data-js-toggle id="toggle-2">
      <div id="toggle-switcher-2" data-js-toggle-switch>
        Click me!
      </div>
    </div>
  `;
  
  document.body.innerHTML = fixture;
  
  toggle();
});
  
afterEach(() => {
  document.body.innerHTML = '';
});


describe('when there are no toggle elements on the page', () => {
  beforeEach(() => {
    spyOn(document, 'querySelectorAll').and.returnValue([]);

    document.body.innerHTML = '';

    toggle();
  });
  
  it('should not execute the toggle function', () => {
    expect(document.querySelectorAll).toHaveBeenCalledTimes(1);
  });
});

describe('when clicking the toggle switch', () => {
  let toggleSwitcher;
  let toggle1;

  describe('and it is not active', () => {
    beforeEach(() => {
      toggle1 = document.querySelector('#toggle');
      toggleSwitcher = document.querySelector('#toggle-switcher');
      
      toggle1.classList.remove('is-active');
      toggleSwitcher.dispatchEvent(new Event('click', { bubbles: true }));
    });
    
    it('should add the `is-active` class to the toggle element', () => {
      expect(toggle1.classList.contains('is-active')).toEqual(true);
    });
  });
  
  describe('and it is already active', () => {
    beforeEach(() => {
      toggle1.classList.add('is-active');
      toggleSwitcher.dispatchEvent(new Event('click', { bubbles: true }));
    });
    
    it('should remove the `is-active` class for the toggle element', () => {
      expect(toggle1.classList.contains('is-active')).toEqual(false);
    });
  });
});

describe('when clicking outside of the toggle element', () => {
  let toggle1;
  
  describe('and it is already active', () => {
    beforeEach(() => {
      toggle1 = document.querySelector('#toggle');

      toggle1.classList.add('is-active');
      document.dispatchEvent(new Event('click'));
    });
    
    it('removes the `is-active` class for the toggle element', () => {
      expect(toggle1.classList.contains('is-active')).toEqual(false);
    });
  });
});

describe('when there are multiple toggles', () => {
  let toggle1;
  let toggle2;
  let toggleSwitcher;
  
  beforeEach(() => {
    toggle1 = document.querySelector('#toggle');
    toggle2 = document.querySelector('#toggle-2');
    toggleSwitcher = document.querySelector('#toggle-switcher');
  });
  
  describe('when all of them are inactive', () => {
    describe('and we click on one of them', () => {
      beforeEach(() => {
        toggleSwitcher.dispatchEvent(new Event('click', { bubbles: true }));
      });
      
      it('should not open the others', () => {
        expect(toggle2.classList.contains('is-active')).toEqual(false);
      });
    }); 
  });
  
  describe('when one of them is active', () => {
    beforeEach(() => {
      toggle2.classList.add('is-active');
    });
    
    describe('and a different one is clicked', () => {
      beforeEach(() => {
        toggle1.classList.add('is-active');
        toggleSwitcher.dispatchEvent(new Event('click', { bubbles: true }));
      });
      
      it('should close the current one', () => {
        expect(toggle2.classList.contains('is-active')).toEqual(false);
      });
    });
  });
});
