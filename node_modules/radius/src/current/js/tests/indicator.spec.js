import $ from 'jquery';

import indicator from '../indicator';
import utils from '../utils';

describe('Indicator', () => {
  const fixture = `
    <div id="test-element" class="indicator js-indicator" data-length="5" data-selected-index="3">
    </div>
  `;
  let element;

  beforeEach(() => {
    document.body.innerHTML = fixture + fixture;
    element = document.getElementById('test-element');
  });

  it('module is a function', () => {
    expect(indicator).toEqual(jasmine.any(Function));
  });

  describe('when the function is called', () => {
    let controller;

    beforeEach(() => {
      controller = indicator(element);
    });

    it('adds a class to the element', () => {
      expect($(element)).toHaveClass('has-js');
    });

    it('creates number of children indicated in the attribute', () => {
      expect(element.children.length).toBe(5);
    });

    it('returns selectedIndex prop set to initial value', () => {
      expect(controller.getSelectedIndex()).toBe(3);
    });

    it('selects a child indicated in the attribute', () => {
      expect($(element.children[3])).toHaveClass('is-selected');
    });

    it('does not select other children', () => {
      expect($(element.children[2])).not.toHaveClass('is-selected');
    });

    describe('when I am on desktop', () => {
      beforeEach(() => {
        spyOn(utils, 'hasCoarsePointer').and.returnValue(false);
      });

      describe('when I click on a button', () => {
        let jumpHandler;
        let jumpEventDetail;

        beforeEach(() => {
          jumpHandler = jasmine.createSpy('jumpHandler')
            .and.callFake((e) => { jumpEventDetail = e.detail; });
          element.addEventListener('indicatorselected', jumpHandler);
          $('.indicator__dot:nth-child(2)').click();
        });

        it('fires an event', () => {
          expect(jumpHandler).toHaveBeenCalled();
        });

        it('passes the destination in the event', () => {
          expect(jumpEventDetail).toEqual(1);
        });

        it('clears selected state from the current dot', () => {
          expect($(element.children[4])).not.toHaveClass('is-selected');
        });

        it('sets selected state on the clicked dot', () => {
          expect($(element.children[1])).toHaveClass('is-selected');
        });
      });
    });

    describe('when I am on mobile', () => {
      beforeEach(() => {
        spyOn(utils, 'hasCoarsePointer').and.returnValue(true);
      });

      describe('when I click on the left most item', () => {
        beforeEach(() => {
          $('.indicator__dot:first-child').click();
        });

        it('sets selected state on the clicked dot', () => {
          expect($(element.children[2])).toHaveClass('is-selected');
        });
      });

      describe('when I click on the right most item', () => {
        beforeEach(() => {
          $('.indicator__dot:last-child').click();
        });

        it('sets selected state on the clicked dot', () => {
          expect($(element.children[4])).toHaveClass('is-selected');
        });
      });
    });

    describe('when I use controller', () => {
      describe('selectedIndex', () => {
        let indicatorSelected;

        beforeEach(() => {
          indicatorSelected = jasmine.createSpy('indicatorSelecter');
          element.addEventListener('indicatorselected', indicatorSelected);
          controller.setSelectedIndex(4);
        });

        it('updates the selected index', () => {
          expect(controller.getSelectedIndex()).toBe(4);
        });

        it('selects the indicated child', () => {
          expect($(element.children[4])).toHaveClass('is-selected');
        });

        it('emits an event', () => {
          expect(indicatorSelected).toHaveBeenCalled();
        });

        describe('when it is assigned again', () => {
          beforeEach(() => {
            controller.setSelectedIndex(4);
          });

          it('does not emit the event again', () => {
            expect(indicatorSelected.calls.count()).toBe(1);
          });
        });
      });
    });
  });
});
