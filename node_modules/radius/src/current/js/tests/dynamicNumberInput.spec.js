import $ from 'jquery';
import createDynamicNumberInput, { COMPONENT_SELECTOR } from '../dynamicNumberInput';

describe('dynamicInputField', () => {
  let $root;
  let $inputField;

  beforeEach(() => {
    jasmine.getFixtures().fixturesPath = 'base/src/current/js/tests/fixtures';
    jasmine.getFixtures().load('dynamicNumberInput.html');
    $root = $('.js-dynamic-number-input');
    $inputField = $root.find('.js-input');
  });

  it('exports a function', () => {
    expect(createDynamicNumberInput).toEqual(jasmine.any(Function));
  });

  it('exports a component selector', () => {
    expect(COMPONENT_SELECTOR).toBe('.js-dynamic-number-input');
  });

  describe('when the function is executed', () => {
    let modelUpdated;
    let dniModel;

    beforeEach(() => {
      modelUpdated = window.spyOnEvent($root, 'modelupdated');

      dniModel = createDynamicNumberInput($root.get(0));
    });

    it('adds is-clean class to the root element', () => {
      expect($root).toHaveClass('is-clean');
    });

    it('fires modelupdated event', () => {
      expect(modelUpdated).toHaveBeenTriggered();
    });

    it('formats and displays the default value', () => {
      expect($inputField).toHaveValue('50,000');
    });

    it('sets the size of the input', () => {
      expect($inputField).toHaveProp('size', 6);
    });

    describe('when a value with commas is entered', () => {
      beforeEach(() => {
        $inputField.val('1,0,0,0,00');
        triggerEvent($inputField, 'input');
      });

      it('formats and displays the value', () => {
        expect($inputField).toHaveValue('100,000');
      });
    });

    describe('when the cursor is not at the end of the line when the value changes', () => {
      beforeEach(() => {
        $inputField.val('100000');
        $inputField.get(0).selectionStart = 1;
        triggerEvent($inputField, 'input');
      });

      it('places the cursor at the correct position', () => {
        expect($inputField.get(0).selectionStart).toBe(2);
      });
    });

    describe('when the entered value is valid', () => {
      beforeEach(() => {
        $inputField.val('100000');
        triggerEvent($inputField, 'input');
      });

      it('formats and displays the value', () => {
        expect($inputField).toHaveValue('100,000');
      });

      it('removes the is-clean class', () => {
        expect($root).not.toHaveClass('is-clean');
      });

      describe('when submit button is clicked', () => {
        beforeEach(() => {
          $root.find('.js-submit').click();
        });

        itBehavesLikeSubmitWithValidData();
      });
    });

    describe('when the entered value is invalid', () => {
      let submitButtonClick;

      beforeEach(() => {
        submitButtonClick = window.spyOnEvent(document, 'click');
        $inputField.val('1');
        triggerEvent($inputField, 'input');
      });

      describe('when submit button is clicked', () => {
        beforeEach(() => {
          $root.find('.js-submit').click();
        });

        itBehavesLikeSubmitWithInvalidData();

        it('prevents the default behaviour of the click event', () => {
          expect(submitButtonClick).toHaveBeenPrevented();
        });
      });

      describe('when enter is pressed', () => {
        let onEnterKeyDown;

        beforeEach(() => {
          onEnterKeyDown = window.spyOnEvent(document, 'keydown');

          triggerEvent($inputField, 'keydown', {
            key: 'Enter',
          });
        });

        itBehavesLikeSubmitWithInvalidData();

        it('prevents the default behaviour of the enter key event', () => {
          expect(onEnterKeyDown).toHaveBeenPrevented();
        });
      });

      describe('when input field looses focus', () => {
        beforeEach(() => {
          triggerEvent($inputField, 'blur');
        });

        it('adds is-error class to the root element', () => {
          expect($root).toHaveClass('is-error');
        });
      });
    });

    describe('when the value is set using an API', () => {
      beforeEach(() => {
        dniModel.setValue(500000);
      });

      it('formats and displays the value', () => {
        expect($inputField).toHaveValue('500,000');
      });
    });
  });

  function itBehavesLikeSubmitWithValidData() {
    it('adds the is-clean class', () => {
      expect($root).toHaveClass('is-clean');
    });
  }

  function itBehavesLikeSubmitWithInvalidData() {
    it('does not add the is-clean class', () => {
      expect($root).not.toHaveClass('is-clean');
    });

    it('adds the is-error class', () => {
      expect($root).toHaveClass('is-error');
    });

    describe('when a valid value is entered', () => {
      beforeEach(() => {
        $inputField.val('100000');
        triggerEvent($inputField, 'input');
      });

      it('removes the is-error class', () => {
        expect($root).not.toHaveClass('is-error');
      });
    });
  }
});

function triggerEvent($element, eventType, options = {}) {
  const event = new Event(eventType, {
    bubbles: true,
    cancelable: true,
  });
  Object.assign(event, options);
  $element.get(0).dispatchEvent(event);
}
