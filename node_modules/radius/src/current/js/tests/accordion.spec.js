import accordion from '../accordion';

describe('accordion', () => {
  let item1;
  let item2;
  let item3;
  let click1;
  let click2;
  let click3;

  const fixture = `
    <div class="accordion">
      <div id="item-1" class="js-accordion-item is-active">
        <h4 id="click-1" class="js-accordion-item__title">1</h4>
      </div>
      <div id="item-2" class="js-accordion-item is-active">
        <h4 id="click-2" class="js-accordion-item__title">2</h4>
      </div>
      <div id="item-3" class="js-accordion-item is-active">
        <h4 id="click-3" class="js-accordion-item__title">3</h4>
      </div>
    </div>
  `;

  beforeEach(() => {
    document.body.innerHTML = fixture;
    item1 = document.querySelector('#item-1');
    item2 = document.querySelector('#item-2');
    item3 = document.querySelector('#item-3');
    click1 = document.querySelector('#click-1');
    click2 = document.querySelector('#click-2');
    click3 = document.querySelector('#click-3');

    accordion();
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  it('exports a function', () => {
    expect(accordion).toEqual(jasmine.any(Function));
  });

  describe('when the function is called', () => {
    it('removes the is-active on all elements', () => {
      expect(document.querySelector('.is-active')).toBe(null);
    });

    describe('when an element is clicked', () => {
      beforeEach(() => {
        click1.click();
      });

      it('adds the is-active class on it', () => {
        expect(item1.classList.contains('is-active')).toBe(true);
      });

      it('does not add the is-active class on other elements', () => {
        expect(item2.classList.contains('is-active')).toBe(false);
      });
    });

    describe('when an element is open', () => {
      beforeEach(() => {
        item1.classList.add('is-active');
      });

      describe('and another element is clicked', () => {
        beforeEach(() => {
          click2.click();
        });

        it('should close the initial element', () => {
          expect(item1.classList.contains('is-active')).toBe(false);
        });

        it('should add the active class on current element', () => {
          expect(item2.classList.contains('is-active')).toBe(true)
        });
      });
    });
  });
});
