import utils from '../utils';
import gestureEvents from '../gestureEvents';

describe('GestureEvents', () => {
  it('exports a function', () => {
    expect(gestureEvents).toEqual(jasmine.any(Function));
  });

  describe('when the function is called', () => {
    let element;

    beforeEach(() => {
      spyOn(utils, 'addEventListener').and.callThrough();
      jasmine.getFixtures().set('<div class="test"></div>');
      element = document.querySelector('.test');
      gestureEvents(element);
    });

    it('starts listening for touchstart', () => {
      expect(utils.addEventListener)
        .toHaveBeenCalledWith(element, 'touchstart', jasmine.any(Function));
    });

    it('starts listening for touchend', () => {
      expect(utils.addEventListener)
        .toHaveBeenCalledWith(element, 'touchend', jasmine.any(Function));
    });

    describe('swipe', () => {
      describe('when touchstart happens', () => {
        let swipeHandler;

        beforeEach(() => {
          swipeHandler = jasmine.createSpy('swipeHandler');
          element.addEventListener('swipe', swipeHandler);
          triggerTouchEvent(element, 'touchstart', 100);
        });

        describe('when touchend happens', () => {
          describe('when touchend finished less than threshold away', () => {
            beforeEach(() => {
              triggerTouchEvent(element, 'touchend', 95);
            });

            it('does not fire an event', () => {
              expect(swipeHandler).not.toHaveBeenCalled();
            });
          });

          describe('when touchend is more than threshold away', () => {
            describe('when it is to the left', () => {
              beforeEach(() => {
                triggerTouchEvent(element, 'touchend', 50);
              });

              it('triggers event with the right direction', () => {
                expect(swipeHandler.calls.argsFor(0)[0].detail).toBe('left');
              });
            });

            describe('when it is to the right', () => {
              beforeEach(() => {
                triggerTouchEvent(element, 'touchend', 150);
              });

              it('triggers event with the right direction', () => {
                expect(swipeHandler.calls.argsFor(0)[0].detail).toBe('right');
              });
            });
          });
        });
      });
    });
  });
});

function triggerTouchEvent(element, type, x) {
  // this should really be a TouchEvent but CircleCI didn't like that
  const event = new Event(type);
  event.changedTouches = [
    {
      identifier: 0,
      target: element,
      clientX: x,
    },
  ];

  element.dispatchEvent(event);
}
