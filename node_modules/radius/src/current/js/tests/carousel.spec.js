import $ from 'jquery';
import carousel from '../carousel';

describe('Carousel', () => {
  beforeEach(() => {
    jasmine.getFixtures().fixturesPath = 'base/src/current/js/tests/fixtures';
    jasmine.getFixtures().load('carousel.html');
  });

  it('exports a function', () => {
    expect(carousel).toEqual(jasmine.any(Function));
  });


  describe('when the function is called', () => {
    let element;
    let indicator;
    let gestureEvents;

    beforeEach(() => {
      indicator = createMockIndicator();
      gestureEvents = createMockGestureEvents();

      carousel();
      element = $('.js-carousel');
    });

    it('adds has-js class to the component', () => {
      expect(element).toHaveClass('has-js');
    });

    it('adds is-before to the element before middle child', () => {
      expect($('.js-carousel-item:nth-child(2)')).toHaveClass('is-before');
    });

    it('selects the middle child', () => {
      expect($('.js-carousel-item:nth-child(3)')).toHaveClass('is-selected');
    });

    it('adds after class to the element after middle child', () => {
      expect($('.js-carousel-item:nth-child(4)')).toHaveClass('is-after');
    });

    it('initialises the indicator', () => {
      expect(indicator.constructor).toHaveBeenCalledWith(element.find('.js-indicator')[0]);
    });

    it('enables gesture events', () => {
      expect(gestureEvents).toHaveBeenCalledWith(element[0]);
    });

    it('selects a radio button inside selected carousel item', () => {
      expect($('.js-carousel-item.is-selected [type="radio"]')).toBeChecked();
    });

    describe('when a left most item is clicked', () => {
      beforeEach(() => {
        $('.js-carousel-item:first').click();
      });

      it('selects the first item', () => {
        expect($('.js-carousel-item:first')).toHaveClass('is-selected');
      });

      it('adds after class to the next element', () => {
        expect($('.js-carousel-item:nth-child(2)')).toHaveClass('is-after');
      });

      it('removes the before class from the 2nd element', () => {
        expect($('.js-carousel-item:nth-child(2)')).not.toHaveClass('is-before');
      });

      it('removes the selected class from the 3rd element', () => {
        expect($('.js-carousel-item:nth-child(3)')).not.toHaveClass('is-selected');
      });

      it('removes the after class from the 4th element', () => {
        expect($('.js-carousel-item:nth-child(4)')).not.toHaveClass('is-after');
      });

      it('sets the selectedIndex of indicator', () => {
        expect(indicator.model.setSelectedIndex).toHaveBeenCalledWith(0);
      });
    });

    describe('when I click on the parent', () => {
      it('does not throw', () => {
        expect(() => {
          element.click();
        }).not.toThrow();
      });

      it('keeps the selection', () => {
        element.click();

        expect($('.js-carousel-item:nth-child(3)')).toHaveClass('is-selected');
      });
    });

    describe('when indicator event is received', () => {
      beforeEach(() => {
        element[0].dispatchEvent(new CustomEvent('indicatorselected', {
          detail: 4,
        }));
      });

      it('selects the child defined in the event', () => {
        expect($('.js-carousel-item:nth-child(5)')).toHaveClass('is-selected');
      });
    });

    describe('when a swipe event is received', () => {
      describe('when the direction is right', () => {
        beforeEach(() => {
          element.get(0).dispatchEvent(new CustomEvent('swipe', {
            detail: 'right',
          }));
        });

        it('selects the previous element', () => {
          expect($('.js-carousel-item:nth-child(2)')).toHaveClass('is-selected');
        });

        describe('and is the last item is already selected', () => {
          let carouselLast;
          beforeEach(() => {
            carouselLast = $('.js-carousel-item').last();
            carouselLast.click();

            element.get(0).dispatchEvent(new CustomEvent('swipe', {
              detail: 'left',
            }));
          });

          it('should not change the selected item', () => {
            expect(carouselLast).toHaveClass('is-selected');
          });
        });
      });
      describe('when the direction is left', () => {
        beforeEach(() => {
          element.get(0).dispatchEvent(new CustomEvent('swipe', {
            detail: 'left',
          }));
        });

        it('selects the next element', () => {
          expect($('.js-carousel-item:nth-child(4)')).toHaveClass('is-selected');
        });

        describe('and the first item is already selected', () => {
          let carouselFirst;
          beforeEach(() => {
            carouselFirst = $('.js-carousel-item').first();
            carouselFirst.click();

            element.get(0).dispatchEvent(new CustomEvent('swipe', {
              detail: 'right',
            }));
          });

          it('should not change the selected item', () => {
            expect(carouselFirst).toHaveClass('is-selected');
          });
        });
      });
    });
  });
});

function createMockIndicator() {
  const model = jasmine.createSpyObj('indicatorModel', [
    'setSelectedIndex', 'getSelectedIndex', 'getLength',
  ]);

  const indicator = jasmine.createSpy('indicatorComponent').and.returnValue(model);

  carousel.__Rewire__('indicator', indicator);
  return {
    constructor: indicator,
    model,
  };
}

function createMockGestureEvents() {
  const gestureEvents = jasmine.createSpy('gestureEvents');

  carousel.__Rewire__('gestureEvents', gestureEvents);
  return gestureEvents;
}
