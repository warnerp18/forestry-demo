import $ from 'jquery';
import _ from 'lodash';

import utils from '../utils';

describe('addEventListener', () => {
  beforeEach(() => {
    spyOn(document, 'addEventListener').and.callThrough();
  });

  it('listens for an event', () => {
    utils.addEventListener(document, 'event', jasmine.any(Function), true);

    expect(document.addEventListener)
      .toHaveBeenCalledWith('event', jasmine.any(Function), true);
  });

  it('is not called if it is not available', () => {
    document.addEventListener = null;

    function addTestListener() {
      utils.addEventListener(document, 'focus', jasmine.any(Function), true);
    }

    expect(addTestListener).not.toThrow();
  });

  it('does not blow up when element does not exist', () => {
    function addTestListener() {
      utils.addEventListener(null, 'some-event', () => {});
    }

    expect(addTestListener).not.toThrow();
  });
});

describe('class helpers', () => {
  const INACTIVE_CLASS = 'is-inactive';
  let el;

  beforeEach(() => {
    jasmine.getFixtures().set('<div class="testing test"></div>');
    el = document.querySelector('#jasmine-fixtures div');
  });

  describe('#addClass', () => {
    it('addClass should add the class', () => {
      utils.addClass(el, INACTIVE_CLASS);

      expect($(el).hasClass(INACTIVE_CLASS)).toEqual(true);
    });

    it('should not throw for empty elements', () => {
      expect(() => utils.addClass(null, 'some-class')).not.toThrow();
    });

    it('should not allow duplicate classes', () => {
      utils.addClass(el, INACTIVE_CLASS);
      utils.addClass(el, INACTIVE_CLASS);

      const className = $(el).get(0).className;
      const classNameOccursOnce = className.indexOf(INACTIVE_CLASS)
          === className.lastIndexOf(INACTIVE_CLASS);

      expect(classNameOccursOnce).toEqual(true);
    });
  });

  describe('#removeClass', () => {
    it('should remove one class', () => {
      utils.removeClass(el, 'test');

      expect($(el)).not.toHaveClass('test');
    });

    it('should remove multiple classes', () => {
      utils.removeClass(el, 'test', 'testing');

      expect($(el)).not.toHaveClass('test');
      expect($(el)).not.toHaveClass('testing');
    });
  });

  describe('#hasClass', () => {
    it('should detect the class', () => {
      const hasClass = utils.hasClass(el, 'test');

      expect(hasClass).toEqual(true);
    });

    it('should not detect the class', () => {
      const hasClass = utils.hasClass(el, 'some-other-class');

      expect(hasClass).toEqual(false);
    });
  });
});

describe('textContent', () => {
  $('body').append('<div></div>');
  const el = document.querySelector('div');

  it('should add the text inside the element', () => {
    utils.textContent(el, 'Freedom');

    expect($(el).text()).toEqual('Freedom');
  });
});

describe('hasAttribute', () => {
  beforeEach(() => {
    spyOn(Element.prototype, 'hasAttribute').and.returnValue('maybe');
  });

  it('delegates to Element#hasAttribute', () => {
    const el = document.createElement('div');
    const result = utils.hasAttribute(el, 'some-attr');
    const mostRecentCall = Element.prototype.hasAttribute.calls.mostRecent();

    expect(mostRecentCall.object).toBe(el);
    expect(mostRecentCall.args).toEqual(['some-attr']);
    expect(result).toEqual('maybe');
  });

  describe('when hasAttribute is not available', () => {
    it('returns false', () => {
      expect(utils.hasAttribute({}, 'some-attr')).toBe(false);
    });
  });
});

describe('hasCoarsePointer', () => {
  it('returns false by default', () => {
    expect(utils.hasCoarsePointer()).toBe(false);
  });

  describe('when matchMedia is available', () => {
    let result;

    beforeEach(() => {
      window.matchMedia = window.matchMedia || _.noop;
      spyOn(window, 'matchMedia').and.returnValue({
        matches: 'some value',
      });
      result = utils.hasCoarsePointer();
    });

    it('uses a media query', () => {
      expect(window.matchMedia).toHaveBeenCalledWith('(pointer: coarse)');
    });

    it('returns the result of the media query', () => {
      expect(result).toBe('some value');
    });
  });

  describe('when matchMedia is not available', () => {
    let screen;

    beforeEach(() => {
      window.matchMedia = null;
      screen = {};
      Object.defineProperty(window, 'screen', {
        value: screen,
      });
    });

    describe('when screen width is larger than tablet-large', () => {
      beforeEach(() => {
        screen.width = 981;
      });

      it('returns false', () => {
        expect(utils.hasCoarsePointer()).toBe(false);
      });
    });

    describe('when screen width is smaller than tablet-large', () => {
      beforeEach(() => {
        screen.width = 979;
      });

      it('returns true', () => {
        expect(utils.hasCoarsePointer()).toBe(true);
      });
    });
  });
});

describe('toggleClass', () => {
  $('body').append('<div class="classy"></div>');
  const el = document.querySelector('.classy');

  it('hides a class if it is present', () => {
    utils.toggleClass(el, 'classy');

    expect(el.className).toEqual('');
  });
});

describe('forEach', () => {
  let callback;

  beforeEach(() => {
    callback = jasmine.createSpy('forEach callback');
  });

  it('iterates over arrays', () => {
    utils.forEach([1, 2, 3], callback);
    expect(callback).toHaveBeenCalledTimes(3);
  });

  it('iterates over array like objects', () => {
    utils.forEach({ length: 4 }, callback);
    expect(callback).toHaveBeenCalledTimes(4);
  });
});
