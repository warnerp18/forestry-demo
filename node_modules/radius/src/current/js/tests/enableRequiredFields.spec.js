import enableRequiredFields from '../enableRequiredFields';

describe('enableRequiredFields', () => {
  const fixture = `
    <form action="">
      <input id="required-input" type="text" data-required>
      <input id="optional-input" type="">
    </form>
  `;
  let form;
  let requiredInput;
  let optionalInput;

  beforeEach(() => {
    document.body.innerHTML = fixture;
    form = document.querySelector('form');
    requiredInput = document.querySelector('#required-input');
    optionalInput = document.querySelector('#optional-input');

    spyOn(document.body, 'addEventListener').and.callThrough();

    enableRequiredFields();
  });

  afterEach(() => {
    document.body.innerHTML = '';
  });

  it('listens for focus events', () => {
    expect(document.body.addEventListener)
      .toHaveBeenCalledWith('focus', jasmine.any(Function), true);
  });

  it('does not try to call addEventListener if it is not available', () => {
    document.body.addEventListener = null;
    expect(enableRequiredFields).not.toThrow();
  });

  describe('when a field inside the form is focused', () => {
    beforeEach(() => {
      triggerFocusEvent(requiredInput);
      triggerFocusEvent(optionalInput);
    });

    it('makes the marked field required', () => {
      expect(requiredInput.required).toBe(true);
    });

    it('leaves other fields alone', () => {
      expect(optionalInput.required).toBe(false);
    });

    it('removes the marker attribute', () => {
      expect(requiredInput.hasAttribute('data-required')).toBe(false);
    });
  });

  describe('when the form is submitted', () => {
    let formSubmitEvent;
    let formCheckValidity;

    beforeEach(() => {
      formCheckValidity = spyOn(form, 'checkValidity');
      formSubmitEvent = triggerSubmitEvent(form);
    });

    it('makes the marked field required', () => {
      expect(requiredInput.required).toBe(true);
    });

    describe('if a form is valid', () => {
      beforeEach(() => {
        formCheckValidity.and.returnValue(true);
        formSubmitEvent = triggerSubmitEvent(form);
      });

      it('submits the form', () => {
        expect(formSubmitEvent.preventDefault).not.toHaveBeenCalled();
      });
    });

    describe('if a form is invalid', () => {
      beforeEach(() => {
        formCheckValidity.and.returnValue(false);
        formSubmitEvent = triggerSubmitEvent(form);
      });

      it('prevents the form being submitted', () => {
        expect(formSubmitEvent.preventDefault).toHaveBeenCalled();
      });
    });
  });

  function triggerFocusEvent(element) {
    const event = new FocusEvent('focus');
    element.dispatchEvent(event);
  }

  function triggerSubmitEvent(element) {
    const event = new Event('submit');
    spyOn(event, 'preventDefault');
    element.dispatchEvent(event);

    return event;
  }
});
