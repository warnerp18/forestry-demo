import $ from 'jquery';
import steps from '../steps';

const INACTIVE_CLASS = 'is-inactive';

function sharedBehaviorBefore() {
  const fixture = `
    <div data-step-wrap data-step-text="Step \${step} of \${total}">
      <section data-step>
        <span data-step-count></span>
        <button data-step-advance>Next</button>
      </section>
      <section data-step>
        <span data-step-count></span>
        <label data-step-advance>Next</label>
      </section>
      <section data-step>
        <span data-step-count></span>
        <button data-step-advance>Next</button>
      </section>
    </div>
  `;

  $('body').append(fixture);
}

function sharedBehaviorAfter() {
  $('body').empty();
}

describe('Step cards', () => {
  beforeEach(() => {
    sharedBehaviorBefore();
  });

  afterEach(sharedBehaviorAfter);

  it('should not have is-inactive on any elements when its not loaded', () => {
    const inactiveEls = $(`.${INACTIVE_CLASS}`);

    expect(inactiveEls.length).toEqual(0);
  });

  it('should add is-inactive class to other elements', () => {
    steps();

    const inactiveEls = $(`.${INACTIVE_CLASS}`).length;

    expect(inactiveEls).not.toEqual(0);
  });

  it('should remove is-inactive from next step', () => {
    steps();

    const firstStep = $('[data-step]:first-of-type');
    const nextStep = firstStep.next();
    let hasClass = false;

    firstStep.find('[data-step-advance]').click();

    hasClass = nextStep.hasClass(`.${INACTIVE_CLASS}`);
    expect(hasClass).toBe(false);
  });

  it('should add step count to data-step-count elements', () => {
    steps();

    const firstStepCount = $('[data-step-count]').first();
    expect(firstStepCount.text()).toBe('Step 1 of 3');
  });

  it('should emit stepActivated event', () => {
    let eventEmitted = false;
    steps();

    $('[data-step]').on('stepActivated', () => {
      eventEmitted = true;
    });

    $('[data-step]:first-of-type [data-step-advance]').click();

    expect(eventEmitted).toEqual(true);
  });

  it('step advance prevents default', () => {
    steps();

    const advanceButton = $('[data-step-advance]').first();
    const evt = triggerClickEvent(advanceButton[0]);

    expect(evt.preventDefault).toHaveBeenCalled();
  });

  it('should not prevent default on labels', () => {
    steps();

    const advanceButton = $('label[data-step-advance]');
    const evt = triggerClickEvent(advanceButton[0]);

    expect(evt.preventDefault).not.toHaveBeenCalled();
  });
});

function triggerClickEvent(element) {
  const event = new Event('click', {
    bubbles: true,
  });
  spyOn(event, 'preventDefault');

  element.dispatchEvent(event);
  return event;
}
