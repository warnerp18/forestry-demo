import indexOf from 'lodash/indexOf';
import clamp from 'lodash/clamp';
import includes from 'lodash/includes';

import utils from './utils';

const COMPONENT_SELECTOR = '.js-tabs';
const TAB_SELECTOR = '.js-tab';
const PANEL_SELECTOR = '.js-tabpanel';
const TABLIST_SELECTOR = '.js-tablist';

const ARIA_HIDDEN = 'aria-hidden';
const ARIA_SELECTED = 'aria-selected';
const IS_HIDDEN = 'is-hidden';
const IS_SELECTED = 'is-selected';
const JS_PRESENT = 'has-js';
const TRANSPARENT_BG = 'tablist__item--transparent';

const LEFT_ARROW = 37;
const RIGHT_ARROW = 39;
const TAB = 9;
const SHIFT = 'Shift';

export default function () {
  const components = document.querySelectorAll(COMPONENT_SELECTOR);
  utils.forEach(components, createTabComponent);
}

function createTabComponent(element) {
  const component = element;
  const tabs = component.querySelectorAll(TAB_SELECTOR);
  const panels = component.querySelectorAll(PANEL_SELECTOR);
  const tablist = component.querySelector(TABLIST_SELECTOR);

  showPanel(panels, panels[0]);
  selectTab(tabs, tabs[0]);
  addDefaultAria({ tablist, tabs, panels });

  utils.forEach(panels, setAttribute('tabindex', 0));

  utils.addEventListener(tablist, 'click', e => onTabClicked({ component, tabs, panels }, e));
  utils.addEventListener(tablist, 'keydown', e => onKeyDown({ component, tabs, panels }, e));
  utils.addClass(component, JS_PRESENT);
}

function onTabClicked({ component, panels, tabs }, event) {
  const selectedTab = event.target;
  const selectedPanel = getPanelForTab(component, selectedTab);

  utils.forEach(tabs, removeClass(TRANSPARENT_BG));
  selectedTab.classList.add(TRANSPARENT_BG);

  selectTab(tabs, selectedTab);
  showPanel(panels, selectedPanel);

  event.preventDefault();
}

function onKeyDown({ component, tabs, panels }, event) {
  const keyPressed = event.keyCode;

  if (!shouldHandleKeyEvent(event)) {
    return;
  }

  utils.forEach(tabs, removeClass(TRANSPARENT_BG));

  const currentTab = component.querySelector(`.${IS_SELECTED}`);
  let tabIndex = indexOf(tabs, currentTab);

  if (keyPressed === LEFT_ARROW) {
    tabIndex -= 1;
  } else if (keyPressed === RIGHT_ARROW) {
    tabIndex += 1;
  }
  tabIndex = clamp(tabIndex, 0, tabs.length - 1);

  const selectedTab = tabs[tabIndex];
  const selectedPanel = getPanelForTab(component, selectedTab);

  if (keyPressed === TAB) {
    selectedPanel.focus();
  } else {
    selectTab(tabs, selectedTab);
    showPanel(panels, selectedPanel);
  }

  event.preventDefault();
}

function shouldHandleKeyEvent(event) {
  return includes([LEFT_ARROW, RIGHT_ARROW, TAB], event.keyCode) && !event.getModifierState(SHIFT);
}


function showPanel(panels, selectedPanel) {
  utils.forEach(panels, panel => {
    utils.addClass(panel, IS_HIDDEN);
    panel.setAttribute(ARIA_HIDDEN, true);
  });

  utils.removeClass(selectedPanel, IS_HIDDEN);
  selectedPanel.removeAttribute(ARIA_HIDDEN);
}

function selectTab(tabs, selectedTab) {
  utils.forEach(tabs, tab => {
    utils.removeClass(tab, IS_SELECTED);
    tab.removeAttribute(ARIA_SELECTED);
    tab.setAttribute('tabindex', -1);
  });

  selectedTab.focus();
  utils.addClass(selectedTab, IS_SELECTED);
  selectedTab.setAttribute(ARIA_SELECTED, true);
  selectedTab.setAttribute('tabindex', 0);
}

function getPanelForTab(component, selectedTab) {
  const selectedPanelId = selectedTab.getAttribute('href');
  return component.querySelector(selectedPanelId);
}

function addDefaultAria({ tablist, tabs, panels }) {
  tablist.setAttribute('role', 'tablist');
  utils.forEach(tabs, tab => {
    const id = tab.getAttribute('href').substring(1);
    tab.setAttribute('aria-controls', id);
    tab.setAttribute('role', 'tab');
  });
  utils.forEach(panels, setAttribute('role', 'tabpanel'));
  utils.forEach(tablist.children, setAttribute('role', 'presentation'));
}

function setAttribute(attribute, value) {
  return el => el.setAttribute(attribute, value);
}

function removeClass(className) {
  return el => utils.removeClass(el, className);
}
