import utils from './utils';

const JS_CLASS = 'has-js';
const SELECTED_CLASS = 'is-selected';
const LENGTH_ATTR = 'data-length';
const SELECTED_ATTR = 'data-selected-index';

export default function createIndicator(element) {
  const model = createModel(element, {
    selectedIndex: parseInt(element.getAttribute(SELECTED_ATTR), 10),
    length: parseInt(element.getAttribute(LENGTH_ATTR), 10),
  });

  renderInitial(element, model);

  element.addEventListener('click', event => onDotClick(model, event));
  element.addEventListener('indicatorselected', (event) => {
    updateDots(element.children, event.detail);
  });

  return model;
}

function createModel(emitter, { selectedIndex, length }) {
  const m = {
    selectedIndex,
    length,
  };

  return {
    getSelectedIndex: function getSelectedIndex() {
      return m.selectedIndex;
    },
    setSelectedIndex: function setSelectedIndex(index) {
      if (m.selectedIndex === index) {
        return;
      }

      m.selectedIndex = index;
      const event = createSelectedEvent(index);
      emitter.dispatchEvent(event);
    },
    getLength: function getLength() {
      return m.length;
    },
  };
}

function renderInitial(element, model) {
  utils.addClass(element, JS_CLASS);

  const children = range(model.getLength())
    .map(index => index === model.getSelectedIndex())
    .map(isSelected => createIndicatorDot(isSelected));

  element.insertAdjacentHTML('beforeend', children.join(''));
}

function onDotClick(model, event) {
  if (utils.hasCoarsePointer()) {
    const direction = sign(getElementIndex(event.target) - model.getSelectedIndex());
    model.setSelectedIndex(model.getSelectedIndex() + direction);
  } else {
    model.setSelectedIndex(getElementIndex(event.target));
  }
}

function createIndicatorDot(isSelected = false) {
  const additionalClass = isSelected ? SELECTED_CLASS : '';

  return `<button class="indicator__dot ${additionalClass}" type="button" tabindex="-1"></button>`;
}

function updateDots(children, index) {
  utils.forEach(children, removeClass(SELECTED_CLASS));
  utils.addClass(children[index], SELECTED_CLASS);
}

function getElementIndex(element) {
  return [...element.parentNode.children].indexOf(element);
}

function createSelectedEvent(index) {
  return new CustomEvent('indicatorselected', {
    detail: index,
    bubbles: true,
  });
}

function removeClass(className) {
  return el => utils.removeClass(el, className);
}

function sign(value) {
  if (value > 0) {
    return 1;
  } else if (value < 0) {
    return -1;
  }

  return 0;
}

function range(length) {
  return Array
    .from({ length })
    .map((_, i) => i)
}
