import indicator from './indicator';
import utils from './utils';
import gestureEvents from './gestureEvents';

const SELECTOR = '.js-carousel';
const CHILD_SELECTOR = '.js-carousel-item';
const INDICATOR_SELECTOR = '.js-indicator';
const JS_CLASS = 'has-js';
const SELECTED_CLASS = 'is-selected';
const BEFORE_CLASS = 'is-before';
const AFTER_CLASS = 'is-after';
const SELECTED_ATTR = 'data-selected-index';

export default function carouselComponent() {
  const components = document.querySelectorAll(SELECTOR);
  utils.forEach(components, createCarousel);
}

function createCarousel(element) {
  const indicatorElement = element.querySelector(INDICATOR_SELECTOR);
  const carouselItems = element.querySelectorAll(CHILD_SELECTOR);
  const indicatorComponent = indicator(indicatorElement);

  gestureEvents(element);

  const model = createModel(element, {
    selectedIndex: parseInt(element.getAttribute(SELECTED_ATTR), 10),
  });

  utils.addClass(element, JS_CLASS);
  render(carouselItems, model);

  utils.addEventListener(element, 'click', event => onCarouselItemClick(model, event));
  utils.addEventListener(element, 'carouselmove', (event) => {
    render(carouselItems, model);
    indicatorComponent.setSelectedIndex(event.detail);
  });
  utils.addEventListener(element, 'indicatorselected', (event) => {
    model.setSelectedIndex(event.detail);
  });
  utils.addEventListener(element, 'swipe', (event) => {
    const direction = event.detail === 'left' ? 1 : -1;
    const currentIndex = model.getSelectedIndex();

    if (
      (direction === -1 && currentIndex === 0) ||
      (direction === 1 && currentIndex === (carouselItems.length - 1))
    ) {
      return;
    }

    model.setSelectedIndex(model.getSelectedIndex() + direction);
  });
}

function createModel(emitter, { selectedIndex }) {
  const model = {
    selectedIndex,
  };

  return {
    getSelectedIndex() {
      return model.selectedIndex;
    },
    setSelectedIndex(index) {
      if (model.selectedIndex === index) {
        return;
      }

      model.selectedIndex = index;
      emitter.dispatchEvent(createSelectedEvent(index));
    },
  };
}

function onCarouselItemClick(model, event) {
  const element = event.target.closest(CHILD_SELECTOR);
  if (!element) {
    return;
  }

  model.setSelectedIndex(getElementIndex(element));
}

function render(children, model) {
  utils.forEach(children, (child) => {
    utils.removeClass(child, BEFORE_CLASS, SELECTED_CLASS, AFTER_CLASS);
  });
  carouselTo(children[model.getSelectedIndex()]);
}

function carouselTo(element) {
  utils.addClass(element.previousElementSibling, BEFORE_CLASS);
  utils.addClass(element, SELECTED_CLASS);
  utils.addClass(element.nextElementSibling, AFTER_CLASS);
  element.querySelector('[type="radio"]').checked = true;
}

function createSelectedEvent(index) {
  return new CustomEvent('carouselmove', {
    detail: index,
    bubbles: true,
  });
}

function getElementIndex(element) {
  return [...element.parentNode.children].indexOf(element);
}
