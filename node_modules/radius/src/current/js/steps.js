import _ from 'lodash';
import utils from './utils';

export default () => {
  const steps = getSteps();
  const stepWrap = document.querySelector('[data-step-wrap]');
  const INACTIVE_CLASS = 'is-inactive';

  if (_.isEmpty(steps)) {
    return;
  }

  setInactive(steps);

  utils.forEach(steps, (current, index) => {
    stepCount(current, index);

    utils.addEventListener(current, 'click', (event) => {
      const el = event.target;
      const nextStepEl = current.nextElementSibling;

      if (!utils.hasAttribute(el, 'data-step-advance') || utils.hasAttribute(el, 'disabled')) {
        return;
      }

      if (el.tagName.toLowerCase() !== 'label') {
        event.preventDefault();
      }

      activateNextStep(nextStepEl);
    });
  });

  function createStepString(step, total) {
    const templateStr = stepWrap.getAttribute('data-step-text');
    const compiledTemp = _.template(templateStr);

    return compiledTemp({ step, total });
  }

  function activateNextStep(nextEl) {
    const elHasClass = utils.hasClass(nextEl, INACTIVE_CLASS);
    const event = new CustomEvent('stepActivated');

    if (elHasClass) {
      utils.removeClass(nextEl, INACTIVE_CLASS);
      nextEl.dispatchEvent(event);
    }
  }

  function getSteps() {
    return _.toArray(document.querySelectorAll('[data-step]'));
  }

  function stepCount(step, index) {
    const stepCountEl = step.querySelector('[data-step-count]');
    const stepNumber = index + 1;
    const totalSteps = steps.length;
    const stepString = createStepString(stepNumber, totalSteps);

    if (stepCountEl === null) {
      return;
    }

    utils.textContent(stepCountEl, stepString);
  }

  function setInactive() {
    utils.forEach(_.tail(steps), current => {
      utils.addClass(current, INACTIVE_CLASS);
    });
  }
};
