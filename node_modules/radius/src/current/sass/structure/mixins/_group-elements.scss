/**
 * section: current/structure/mixins/group-elements
 * title: Element groups
 * description: |
 *   $item is an arglist which takes lists with the following params:
 *     - min breakpoint - integer or false
 *     - max breakpoint - integer or false
 *     - number of columns - integer
 *     - center last - bolean (use with care, it generates a lot of CSS)

 *   e.g:
 *   layout with:
 *     - 1 column between a and b
 *     - 2 columns between b and c
 *     - 3 columns between c and d and last one centered

 *   @include group-elements(a b 1 false, b c 2 false, 3 c d true);
 */

@mixin group-elements($item...) {
  $bp-min: 9999;
  $bp-max: 0;

  @each $list in $item {
    $list-bp-min: nth($list, 1); // breakpoint min - integer or false
    $list-bp-max: nth($list, 2); // breakpoint max - integer or false
    $list-cols:  nth($list, 3); // number of columns - integer
    $list-last:  nth($list, 4); // center last one - bolean

    // find the smallest breakpoint
    // we need this to know where to apply the general styling
    @if $bp-min != false {
      @if $list-bp-min == false {
        $bp-min: $list-bp-min;
      } @else if $list-bp-min < $bp-min {
        $bp-min: $list-bp-min;
      }
    }

    // find the largest breakpoint
    // we need this to know where to apply the general styling
    @if $bp-max != false {
      @if $list-bp-max == false {
        $bp-max: $list-bp-max;
      } @else if $list-bp-max > $bp-max {
        $bp-max: $list-bp-max;
      }
    }

    @include breakpoint(from $list-bp-min to $list-bp-max) {
      > * {
        // width is 100 divided by the number of columns
        width: percentage(1 / $list-cols);

        &:nth-child(#{$list-cols}n+1) {
          // add the clear to every first item on a new row
          @include clear-float(false, false);

          @if $list-last {
            // find the first item of the last row and add the correction by figuring out how many elements are on that list
            @for $i from 1 through ($list-cols - 1) {
              &:nth-last-child(#{$i}) {
                margin-left: percentage((1 / $list-cols) / 2 * ($list-cols - $i));
              }
            }
          }
        }

      }
    }

  }

  @include breakpoint(from $bp-min to $bp-max) {
    @include clear-float(true, false);
    display: block;

    > * {
      float: left;
    }
  }

}
