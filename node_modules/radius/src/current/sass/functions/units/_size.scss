/**
 * section: current/functions/units/size
 * title: Size
 *
 * description: |
 *   We use a default base unit. This functions ensures that we always use multiples of that base unit.<br>
 *   We should always define margins / paddings and all other sizes using this function.
 *
 *   ```
 *   unit($val)
 *   // $REMsupport: true -> unit(10 auto 3 0) -> 10rem auto 3rem 0
 *   // $REMsupport: false -> unit(10 auto 3 0) -> 160px auto 30rem 0
 *   ```
 */


@function multiplier($val) {
  // It returns PX or REM values, depending on the $REMsupport flag value
  // This is a support function for size(). You should use that for managing PX vs REM
  //
  // multiplier($val)
  // // considering 1rem = 16px
  // // multiplier(16px) -> 1rem
  // // multiplier(2rem) -> 32px

  // just to make sure we have a fallback for multiplier
  $multiplier: $val;

  // default $unit value
  $unit: rem;

  @if type-of($val) == number and $val != 0 {

    // determine the unit for $val
    $val: separate-unit($val);

    @if last($val) != false {
      $unit: last($val);
    }

    $val: first($val);
    // determine the multiplier
    @if get-const(config, rem-support) {
      @if $unit == rem {
        $multiplier: $val * 1rem;
      } @else if $unit == unquote('%') {
        $multiplier: $val * 1%;
      } @else {
        $multiplier: $val / get-const(config, unit) * 1rem;
      }
    } @else {
      @if $unit == rem {
        $multiplier: $val * get-const(config, unit) * 1px;
      } @else if $unit == unquote('%') {
        $multiplier: $val * 1%;
      } @else {
        $multiplier: $val * 1px;
      }
    }

  }

  @return $multiplier;
}


@function size($val) {
  $c-val: ();
  @if type-of($val) == list {
    @each $i in $val {
      $i: multiplier($i);
      $c-val: append($c-val, $i);
    }

  } @else if type-of($val) == number {
    $c-val: multiplier($val);
  } @else {
    $c-val: $val;
  }

  @return $c-val;
}
