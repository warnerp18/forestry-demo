/**
 * section: current/structure/grid-system
 * title: Grids / columns
 *
 * description: |
 *   Funding Circle is using the golden ratio grid system. This is different than the usual 12 columns grid system, offering more organic layouts.
 *
 *   Keep in mind that in this case the columns have widths depending on the context and not strictly on parent. If, in a standard grid system the sum of the "column-units" has to be a certain number (e.g. `4 + 4 + 8 = 12` columns grid), in a golden ratio grid system the widths vary depending on the siblings, so they don't have to be summed up to reach a certain number (e.g. `1 + 2` is as valid as `1 + 4 + 2 + 3`).
 *
 *   The columns "widths" are represented by a parameter that can take values from 1 to 8 (1 is the smallest proportion, 8 is the biggest).
 */

/**
 * section: current/structure/grid-system/utility-classes
 * title: Utility classes
 *
 * description: |
 *   Just like Bootstrap, you can use utility classes for fast prototyping. They are splitted in 4 categories: `small`, `medium`, `large`, `extra-large` for responsive prototyping. The approach is mobile-first, where the small columns will be applied accross all resolutions unless another class for a bigger breakpoint is applied.
 *
 *   The parent of the columns require the `.col-s-wrapper / .col-m-wrapper / .col-l-wrapper / .col-xl-wrapper` class on it (the classes are inclusive, so if you use `.col-s-wrapper` the others are not required).
 *
 *   Class structure: `.col-[s/m/l/xl]-[1-8]` (e.g. `.col-m-3` will apply a proportion of 3 on the column from medium screen onwards).
 *
 * markup: dependencies/grid-system/utility-classes
 */

/**
 * section: current/structure/grid-system/mixin
 * title: Column generator mixin
 *
 * description: |
 *   For more fine tuned layouts, you can use the mixin and generate more complex layouts between custom breakpoints. This can be used together with `breakpoints()` mixin as it just generates the widths.
 *
 *   The mixin has to be applied on the wrapper of the columns. Adding a comma in the list will generate a new row.
 *
 *   ```
 *   .column-mixin-example {
 *      // columns mixin adds default padding to each column
 *      @include columns(3 2 1, 4 2, 4 1 2 3);
 *      // columns-no-padding mixin does not add default padding to each column
 *      @include columns-no-padding(3 2 1, 4 2, 4 1 2 3);
 *   }
 *   ```
 *
 * markup: dependencies/grid-system/column-mixin
 */

/**
 * section: current/structure/grid-system/golden-paddings
 * title: Golden ratio margins
 *
 * description: |
 *   Sets the right and left margins for individual elements/sections, based on the ratio of the margin in proportion to the element/section itself
 *
 *   Sets golden ratio left/right paddings for elements:
 *
 *   ```
 *   golden-ratio-paddings(5, 3, 2)
 *   // the first parameter represents the ratio/proportion of the element content
 *   // 2nd parameter is the left margin
 *   // 3rd parameter is the right margin
 *   ```
 */

@import '../../../../../node_modules/rs-golden-ratio-grid/index';
