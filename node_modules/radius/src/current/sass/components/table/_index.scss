/**
 * section: current/components/table
 * title: Table
 *
 * activateComponent: radius-component-table
 *
 * description: |
 *   It is very important to make sure all classes and `[data]` attributes are set just like in the example.
 *
 *   There are two variations of responsive tables available, depending on the behaviour on small screens:
 *     - vertical - on small screens, the columns are transformed into cards
 *     - horizontal - on small screens, the rows are transformed into cards with the first `<td>` (that must contain `data-td-title`) as the title of the card
 *
 *   The table implementation is using `data-td-label` as the title of the card and `data-table-hide` for elements that will be hidden on small screens.
 *
 *   The implementation is not dependent on the `table` tag, but should be kept like that for semantic reasons. Also, the `<div class="table"/>` wrapper is required.
 *
 */


/**
 * section: current/components/table/table-vertical
 * title: Table - column to card
 *
 * description: |
 *   This implementation splits the table on cards based on the columns of the table. The title of each card will remain the `<th>`.
 *
 *   `data-td-label` should be set to be the same as the content of the first column to ensure that the title of the card and rows are the same across all screen widths.
 *
 *   On small screens we want to hide the column header, so we need to add `data-table-hide` on the first `<td>` or `<th>` from each `<tr>`.
 *
 * markup: components/table/table-vertical
 */


/**
 * section: current/components/table/table-horizontal
 * title: Table - row to card
 *
 * description: |
 *   Example of table usage
 *
 *   This implementation splits the table on cards based on the rows of the table. The title of each card should be the content of the first `<td data-td-title>`.
 *
 *   `data-td-label` should be set to be the same as the corresponding `<th>` to ensure that the title of the card and rows are the same across all screen widths.
 *
 *   On small screens we want to hide the `<thead>` because the information there will be repeated on the cards, so we need to add `data-table-hide` on it.
 *
 * modifiers:
 *   table--inline: on small screens the cards are in a row (similar to vertical table)
 *   table--label-row: on small screens the label and content fill one `<tr>`
 *   table--label-inline: on small screens we try to fit as many label / content pairs as possible
 *
 * markup: components/table/table-horizontal
 */


$_table: (
  bp-medium: tablet-small,
  border-color: get-color(grey-warm),
  label-color: get-color(grey-warm, darkest),
  shadow: 0 2px 0 0 rgba(get-color(black), .05)
);


@function table($var) {
  @return map-get($_table, $var);
}


%table-wrapper {
  width: 100%;
  padding-bottom: size(2.5);

  overflow: auto;
}


%table-label-row {
  @include to(table(bp-medium)) {
    text-align: right;
  }
}


%table-label-row:before {
  @include to(table(bp-medium)) {
    float: left;
  }
}


// general table
@mixin radius-component-table {
  .table {
    margin-bottom: size(2.5);
  }


  .table__content {
    display: table;
    width: 100%;

    text-align: left;

    border: 0;
  }


  .table__head {
    display: table-header-group;

    font-weight: get-const(config, font-weight-bold);
  }


  .table__body {
    display: table-row-group;
  }


  .table__row {
    display: table-row;


    @include from(table(bp-medium)) {
      border-bottom: 1px solid table(border-color);
    }
  }


  .table__row:hover {
    @include from(table(bp-medium)) {
      background: transparentize(get-color(black), .95);
    }
  }


  .table__cell {
    display: table-cell;


    @include from(table(bp-medium)) {
      padding: size(.5 1);
    }
  }


  .table__cell:before {
    @include font(small, false);

    line-height: size(1.5);
    color: table(label-color);


    @include to(table(bp-medium)) {
      content: attr(data-td-label);
    }
  }


  [data-table-hide] {
    @include to(table(bp-medium)) {
      display: none;
    }
  }


  // vertical
  .table--vertical {
    @extend %table-wrapper !optional;
  }


  .table--vertical .table__content {
    @include to(table(bp-medium)) {
      width: auto;


      border-collapse: separate;
      border-spacing: size(2 0);
      table-layout: fixed;
    }
  }


  .table--vertical .table__cell {
    @extend %table-label-row;


    @include to(table(bp-medium)) {
      min-width: size(16);
      padding: size(.5 1);

      border-right: 1px solid table(border-color);
      border-left: 1px solid table(border-color);
    }
  }


  .table--vertical .table__row:last-child:not(.table__row--head) .table__cell {
    @include to(table(bp-medium)) {
      border-bottom: 1px solid table(border-color);
      box-shadow: table(shadow);
    }
  }


  .table--vertical .table__cell--head {
    @include to(table(bp-medium)) {
      text-align: center;

      border-top: 1px solid table(border-color);
    }
  }


  // horizontal
  .table--horizontal .table__content,
  .table--horizontal .table__body,
  .table--horizontal .table__row,
  .table--horizontal .table__cell {
    @include to(table(bp-medium)) {
      display: block;
      width: 100%;
    }
  }


  .table--horizontal .table__row {
    @include to(table(bp-medium)) {
      max-width: size(26);
      min-width: size(16);
      padding: size(1);
      margin: size(0 auto 1);

      border: 1px solid table(border-color);
      box-shadow: table(shadow);
    }
  }


  .table__cell[data-td-title] {
    @include to(table(bp-medium)) {
      width: 100%;
      margin-bottom: size(1);

      font-weight: get-const(config, font-weight-bold);
      text-align: center;
    }
  }


  // horizontal - inline
  .table--inline {
    @extend %table-wrapper !optional;
  }


  .table--inline .table__body {
    @include to(table(bp-medium)) {
      display: flex;
    }
  }


  .table--inline .table__row {
    @include to(table(bp-medium)) {
      margin: size(0 1);
    }
  }


  // horizontal label row
  .table--label-row .table__cell {
    @extend %table-label-row !optional;
  }


  // horizontal label inline
  .table--label-inline .table__row {
    @include to(table(bp-medium)) {
      display: flex;
      flex-wrap: wrap;
    }
  }


  .table--label-inline [data-td-label] {
    @include to(table(bp-medium)) {
      width: auto;
      padding: size(0 1 1);
    }
  }


  .table--label-inline [data-td-label]:before {
    @include to(table(bp-medium)) {
      display: block;
    }
  }
}
