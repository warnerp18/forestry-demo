@import 'mixins/index';

/**
 * section: current/components/carousel
 * title: Carousel
 *
 * activateComponent: radius-component-carousel
 *
 * description: |
 *   Carousel should be used as a more iconic (as in distinctive visual signature) alternative to a list of elements. This component lends itself to situations where a list of comparable options is presented, like a list of loan terms. To help illustrate the number of options this component should be used along with the indicator component.
 *
 *   ### Environment specific behaviour:
 *   On devices with coarse pointer accuracy, swipe gesture can be used to go to the next or previous carousel item.
 *   When JavaScript or flexbox are not available, this components renders as a list of elements which wraps.
 *
 *   ### Limitations:
 *   This component is best used with a limited amount of items (3-10) to both make use of it's visual appeal (less than 3 items) and avoid information overload (more than 10 items).
 *   Additionally, the component should not be placed in the vicinity of other components making use of perspective.
 *
 * markup: components/carousel/carousel
 */

$_carousel: (
  zoom: .85,
  child-width: size(9),
  desktop-overlap: 85%,
  overlap: 70%,
  opacity: .6
);


@function carousel($key) {
  @return map-get($_carousel, $key);
}

@mixin radius-component-carousel {
  .carousel {
    position: relative;

    display: flex;
    flex-flow: row wrap;
    margin-bottom: size(.5);

    @include breakpoint(from mobile-medium) {
      margin-bottom: size(1);
    }
  }


  .carousel__item {
    display: inline-block;

    cursor: pointer;
  }


  .has-js {
    .carousel__item {
      @include carousel-transforms(carousel(zoom), negative(carousel(overlap)));

      position: absolute;
      right: 0;
      left: 0;
      z-index: 1;

      width: carousel(child-width);
      margin: 0 auto;

      color: transparentize(get-color(black), carousel(opacity));

      background: get-color(white);

      transition: transform 300ms ease-out, color 300ms ease-out;

      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(pow(carousel(zoom), 2), negative(carousel(desktop-overlap)) * 2);
      }
    }


    .carousel__item.is-selected {
      position: relative;
      z-index: 5;

      transform: scale(1);
    }


    .carousel__item.is-before,
    .carousel__item.is-after {
      z-index: 4;

      color: transparentize(get-color(black), carousel(opacity) * carousel(opacity));
    }


    .carousel__item.is-before {
      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(carousel(zoom), negative(carousel(desktop-overlap)));
      }
    }


    .carousel__item.is-after {
      @include carousel-transforms(carousel(zoom), carousel(overlap));

      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(carousel(zoom), carousel(desktop-overlap));
      }
    }


    .carousel__item.is-after ~ .carousel__item {
      @include carousel-transforms(carousel(zoom), carousel(overlap));

      @include breakpoint(from mobile-medium) {
        @include carousel-transforms(carousel(zoom) * carousel(zoom), carousel(desktop-overlap) * 2);
      }
    }


    .carousel__item.is-after + .carousel__item {
      z-index: 3;
    }

    .carousel__item.is-after + .carousel__item + .carousel__item {
      z-index: 2;
    }
  }
}
