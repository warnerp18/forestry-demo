(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/video-block/js/index', ['exports', '../transitions-supported'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../transitions-supported'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.transitionsSupported);
    global.radiusVideoBlockJsIndex = mod.exports;
  }
})(this, function (exports, _transitionsSupported) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _transitionsSupported2 = _interopRequireDefault(_transitionsSupported);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports['default'] = function () {
    var VIDEO_BLOCK_DATA_ATTR = 'data-js-video-block';
    var VIDEO_BLOCK_DATA_ATTR_JS = 'jsVideoBlock';
    var VIDEO_BLOCK_TRIGGER_DATA_ATTR = 'data-js-video-block-trigger';
    var VIDEO_BLOCK_CONTAINER_DATA_ATTR = 'data-js-video-block-container';
    var VIDEO_BLOCK_PLAYER_DATA_ATTR = 'data-js-video-block-player';
    var VISIBLE_CLASS = 'is-visible';
    var TRANSITIONING_CLASS = 'is-transitioning';
    var RATIO = 16 / 9;
    var TRANSITION_SUPPORTED = _transitionsSupported2['default'];
    var videos = Array.from(document.querySelectorAll('[' + VIDEO_BLOCK_DATA_ATTR + ']'));

    videos.forEach(function (video) {
      if (!getVideoId(video)) {
        return;
      }

      init(video);
      bindEvents(video);
      updatePlayerSize(video);
    });

    function init(video) {
      var container = getContainer(video);

      container.appendChild(video);

      if (getComputedStyle(container).position === 'static') {
        container.style.position = 'relative';
      }
    }

    function bindEvents(video) {
      var selector = '[' + VIDEO_BLOCK_TRIGGER_DATA_ATTR + '="' + getVideoId(video) + '"]';
      var ctas = Array.from(document.querySelectorAll(selector));

      ctas.forEach(function (cta) {
        cta.addEventListener('click', function () {
          toggle(video);
        });
      });

      window.addEventListener('resize', function () {
        window.requestAnimationFrame(function () {
          updatePlayerSize(video);
        });
      });

      video.addEventListener('transitionend', function () {
        video.classList.remove(TRANSITIONING_CLASS);
      });
    }

    function toggle(video) {
      if (TRANSITION_SUPPORTED) {
        video.classList.add(TRANSITIONING_CLASS);
      }

      // Force a repaint after the TRANSITIONING_CLASS was added
      window.requestAnimationFrame(function () {
        window.requestAnimationFrame(function () {
          video.classList.toggle(VISIBLE_CLASS);
          togglePlayer(video, video.classList.contains(VISIBLE_CLASS));
        });
      });

      updatePlayerSize(video, { force: true });
    }

    function getVideoId(video) {
      return video.dataset[VIDEO_BLOCK_DATA_ATTR_JS];
    }

    function getContainer(video) {
      return document.querySelector('[' + VIDEO_BLOCK_CONTAINER_DATA_ATTR + '="' + getVideoId(video) + '"]');
    }

    function togglePlayer(video, state) {
      var player = video.querySelector('[' + VIDEO_BLOCK_PLAYER_DATA_ATTR + ']');
      var functionName = state ? 'play' : 'stop';
      var data = {
        event: 'command',
        func: functionName + 'Video'
      };

      player.contentWindow.postMessage(JSON.stringify(data), '*');
    }

    function updatePlayerSize(video) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var container = getContainer(video);
      var player = video.querySelector('[' + VIDEO_BLOCK_PLAYER_DATA_ATTR + ']');
      var containerWidth = container.clientWidth;
      var containerHeight = container.clientHeight;
      var width = void 0;
      var height = void 0;

      if (!options.force && !video.classList.contains(VISIBLE_CLASS)) {
        return;
      }

      if (containerWidth / containerHeight > RATIO) {
        height = containerHeight;
        width = height * RATIO;
      } else {
        width = containerWidth;
        height = width / RATIO;
      }

      player.style.width = width + 'px';
      player.style.height = height + 'px';
    }
  };
});