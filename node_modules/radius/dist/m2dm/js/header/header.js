(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/header/js/header', ['exports', './utils'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('./utils'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.utils);
    global.radiusHeaderJsHeader = mod.exports;
  }
})(this, function (exports, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BODY_CLASS_NAME = exports.OVERLAY_SELECTOR = exports.HIDE_SELECTOR = exports.MORE_SELECTOR = exports.IS_ACTIVE = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var IS_ACTIVE = exports.IS_ACTIVE = 'is-active';

  var MORE_SELECTOR = exports.MORE_SELECTOR = '[data-js-overlay-open]';
  var HIDE_SELECTOR = exports.HIDE_SELECTOR = '[data-js-overlay-close]';
  var OVERLAY_SELECTOR = exports.OVERLAY_SELECTOR = '[data-js-header-overlay]';
  var BODY_CLASS_NAME = exports.BODY_CLASS_NAME = 'header-overlay-open';

  var Header = function () {
    function Header(headerEl) {
      _classCallCheck(this, Header);

      this.headerEl = headerEl;
      this.isOpen = false;
      this.overlayEl = this.headerEl.querySelector(OVERLAY_SELECTOR);
      this.hasOverlay = !!this.overlayEl;
      this.body = document.body;
    }

    _createClass(Header, [{
      key: 'start',
      value: function start() {
        if (this.hasOverlay) {
          this.bindHandlers();
        }
      }
    }, {
      key: 'showMenu',
      value: function showMenu() {
        if (this.isOpen) {
          return;
        }
        this.isOpen = true;

        this.freezeBody();
        this.overlayEl.style.display = 'block';
        this.headerEl.classList.add(IS_ACTIVE);
      }
    }, {
      key: 'hideMenu',
      value: function hideMenu() {
        if (!this.isOpen) {
          return;
        }
        this.isOpen = false;
        this.hideOverlay();
        this.headerEl.classList.remove(IS_ACTIVE);
        this.unFreezeBody();
      }
    }, {
      key: 'bindHandlers',
      value: function bindHandlers() {
        var moreButton = this.headerEl.querySelector(MORE_SELECTOR);
        var hideButton = this.headerEl.querySelector(HIDE_SELECTOR);

        moreButton.addEventListener('click', this.showMenu.bind(this));
        hideButton.addEventListener('click', this.hideMenu.bind(this));
        document.addEventListener('keydown', this.escapeKeyListener.bind(this));
      }
    }, {
      key: 'freezeBody',
      value: function freezeBody() {
        this.body.classList.add(BODY_CLASS_NAME);
      }
    }, {
      key: 'unFreezeBody',
      value: function unFreezeBody() {
        this.body.classList.remove(BODY_CLASS_NAME);
      }
    }, {
      key: 'hideOverlay',
      value: function hideOverlay() {
        this.overlayEl.style.display = 'none';
      }
    }, {
      key: 'escapeKeyListener',
      value: function escapeKeyListener(event) {
        if ((0, _utils.isEscapeKey)(event)) {
          this.hideMenu();
        }
      }
    }]);

    return Header;
  }();

  exports['default'] = Header;
});