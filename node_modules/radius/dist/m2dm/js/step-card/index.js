(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/step-card/js/index', ['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.radiusStepCardJsIndex = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports['default'] = function () {
    var CLASS_COLLAPSED = 'is-collapsed';
    var TRANSITION_SUPPORTED = 'transition' in document.documentElement.style || 'MozTransition' in document.documentElement.style || 'OTransition' in document.documentElement.style || 'WebkitTransition' in document.documentElement.style;

    var steps = Array.from(document.querySelectorAll('[data-js-step-card]'));

    function whenAnimationFrame() {
      return new Promise(function (resolve) {
        requestAnimationFrame(resolve);
      });
    }

    steps.forEach(function (step) {
      var toggles = Array.from(step.querySelectorAll('[data-js-step-card-toggle]'));
      var collapse = step.querySelector('[data-js-step-card-tohide]');
      var content = step.querySelector('[data-js-step-card-toshow]');

      var handleCollapse = function handleCollapse() {
        if (!content || !collapse) {
          step.classList.toggle(CLASS_COLLAPSED);

          return;
        }

        var initialHeight = step.offsetHeight;
        var transitionToHeight = void 0;
        var toHide = collapse;
        var toShow = content;

        function resetStyles() {
          toHide.style.display = '';
          toHide.style.opacity = '';
          toShow.style.display = '';
          toShow.style.opacity = '';
          step.style.height = '';
        }

        resetStyles();

        if (step.classList.contains(CLASS_COLLAPSED)) {
          var _ref = [toHide, toShow];
          toShow = _ref[0];
          toHide = _ref[1];
        }

        requestAnimationFrame(function () {
          step.classList.toggle(CLASS_COLLAPSED);
          transitionToHeight = step.offsetHeight;

          step.classList.toggle(CLASS_COLLAPSED);
          step.style.height = initialHeight + 'px';

          whenAnimationFrame().then(function () {
            return new Promise(function (resolve) {
              if (!TRANSITION_SUPPORTED) {
                resolve();
                return;
              }

              var handleToHideTranition = function handleToHideTranition(e) {
                e.stopPropagation();
                toHide.removeEventListener('transitionend', handleToHideTranition);

                toHide.style.display = 'none';

                resolve();
              };
              toHide.addEventListener('transitionend', handleToHideTranition);

              step.style.height = transitionToHeight + 'px';
              toHide.style.opacity = 0;
            });
          }).then(function () {
            return new Promise(function (resolve) {
              if (!TRANSITION_SUPPORTED) {
                resolve();
                return;
              }

              var handleToShowTransition = function handleToShowTransition(e) {
                e.stopPropagation();
                toShow.removeEventListener('transitionend', handleToShowTransition);

                resolve();
              };
              toShow.addEventListener('transitionend', handleToShowTransition);

              whenAnimationFrame().then(function () {
                toShow.style.display = 'block';

                return whenAnimationFrame();
              }).then(function () {
                toShow.style.opacity = 1;
              });
            });
          }).then(function () {
            step.classList.toggle(CLASS_COLLAPSED);
          }).then(resetStyles).then(function () {
            step.dispatchEvent(new Event('doneAnimation'));
          });
        });
      };

      toggles.forEach(function (toggle) {
        toggle.addEventListener('click', function () {
          if (typeof step.toCollapse === 'function' && !step.classList.contains(CLASS_COLLAPSED)) {
            step.toCollapse(handleCollapse);
          } else {
            handleCollapse();
          }
        });
      });
    });
  };
});