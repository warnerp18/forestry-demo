(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/tabs/js/index', ['exports', 'lodash/clamp'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('lodash/clamp'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.clamp);
    global.radiusTabsJsIndex = mod.exports;
  }
})(this, function (exports, _clamp) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    var components = document.querySelectorAll(COMPONENT_SELECTOR);
    Array.from(components).forEach(createTabComponent);
  };

  var _clamp2 = _interopRequireDefault(_clamp);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var COMPONENT_SELECTOR = '[data-tabs]';
  var TAB_SELECTOR = '[data-tablist-item]';
  var PANEL_SELECTOR = '[data-tabpanel]';
  var TABLIST_SELECTOR = '[data-tablist]';

  var ARIA_HIDDEN = 'aria-hidden';
  var ARIA_SELECTED = 'aria-selected';
  var IS_HIDDEN = 'is-hidden';
  var IS_SELECTED = 'is-selected';
  var JS_PRESENT = 'has-js';

  var LEFT_ARROW = 37;
  var RIGHT_ARROW = 39;
  var TAB = 9;
  var SHIFT = 'Shift';

  function createTabComponent(element) {
    var component = element;
    var tabs = Array.from(component.querySelectorAll(TAB_SELECTOR));
    var panels = Array.from(component.querySelectorAll(PANEL_SELECTOR));
    var tablist = component.querySelector(TABLIST_SELECTOR);

    showPanel(panels, panels[0]);
    selectTab(tabs, tabs[0]);
    addDefaultAria({ tablist: tablist, tabs: tabs, panels: panels });

    panels.forEach(setAttribute('tabindex', 0));

    tablist.addEventListener('click', function (e) {
      return onTabClicked({ component: component, tabs: tabs, panels: panels }, e);
    });
    tablist.addEventListener('keydown', function (e) {
      return onKeyDown({ component: component, tabs: tabs, panels: panels }, e);
    });
    component.classList.add(JS_PRESENT);
  }

  function onTabClicked(_ref, event) {
    var component = _ref.component,
        panels = _ref.panels,
        tabs = _ref.tabs;

    var selectedTab = event.target;
    if (!selectedTab.matches(TAB_SELECTOR)) {
      return;
    }
    event.preventDefault();

    var selectedPanel = getPanelForTab(component, selectedTab);

    selectTab(tabs, selectedTab);
    showPanel(panels, selectedPanel);
  }

  function onKeyDown(_ref2, event) {
    var component = _ref2.component,
        tabs = _ref2.tabs,
        panels = _ref2.panels;

    var keyPressed = event.keyCode;

    if (!shouldHandleKeyEvent(event)) {
      return;
    }
    event.preventDefault();

    var currentTab = component.querySelector('.' + IS_SELECTED);
    var tabIndex = tabs.indexOf(currentTab);

    if (keyPressed === LEFT_ARROW) {
      tabIndex -= 1;
    } else if (keyPressed === RIGHT_ARROW) {
      tabIndex += 1;
    }
    tabIndex = (0, _clamp2['default'])(tabIndex, 0, tabs.length - 1);

    var selectedTab = tabs[tabIndex];
    var selectedPanel = getPanelForTab(component, selectedTab);

    if (keyPressed === TAB) {
      selectedPanel.focus();
    } else {
      selectTab(tabs, selectedTab);
      showPanel(panels, selectedPanel);
    }
  }

  function shouldHandleKeyEvent(event) {
    return [LEFT_ARROW, RIGHT_ARROW, TAB].includes(event.keyCode) && !event.getModifierState(SHIFT);
  }

  function showPanel(panels, selectedPanel) {
    panels.forEach(function (panel) {
      panel.classList.add(IS_HIDDEN);
      panel.setAttribute(ARIA_HIDDEN, true);
    });

    selectedPanel.classList.remove(IS_HIDDEN);
    selectedPanel.removeAttribute(ARIA_HIDDEN);
  }

  function selectTab(tabs, selectedTab) {
    tabs.forEach(function (tab) {
      tab.classList.remove(IS_SELECTED);
      tab.removeAttribute(ARIA_SELECTED);
      tab.setAttribute('tabindex', -1);
    });

    selectedTab.focus();
    selectedTab.classList.add(IS_SELECTED);
    selectedTab.setAttribute(ARIA_SELECTED, true);
    selectedTab.setAttribute('tabindex', 0);
  }

  function getPanelForTab(component, selectedTab) {
    var selectedPanelId = selectedTab.getAttribute('href');
    return component.querySelector(selectedPanelId);
  }

  function addDefaultAria(_ref3) {
    var tablist = _ref3.tablist,
        tabs = _ref3.tabs,
        panels = _ref3.panels;

    tablist.setAttribute('role', 'tablist');
    tabs.forEach(function (tab) {
      var id = tab.getAttribute('href').substring(1);
      tab.setAttribute('aria-controls', id);
      tab.setAttribute('role', 'tab');
    });
    panels.forEach(setAttribute('role', 'tabpanel'));
    Array.from(tablist.children).forEach(setAttribute('role', 'presentation'));
  }

  function setAttribute(attribute, value) {
    return function (el) {
      return el.setAttribute(attribute, value);
    };
  }
});