(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/calculator/js/containers/loan-breakdown', ['exports', 'react-redux', '../components/loan-breakdown', '../calculate-amortisation'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react-redux'), require('../components/loan-breakdown'), require('../calculate-amortisation'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.reactRedux, global.loanBreakdown, global.calculateAmortisation);
    global.radiusCalculatorJsContainersLoanBreakdown = mod.exports;
  }
})(this, function (exports, _reactRedux, _loanBreakdown, _calculateAmortisation) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _loanBreakdown2 = _interopRequireDefault(_loanBreakdown);

  var _calculateAmortisation2 = _interopRequireDefault(_calculateAmortisation);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function formatCurrency(value, locale) {
    var currency = void 0;
    switch (locale) {
      case 'en-GB':
        currency = 'GBP';
        break;
      case 'en-US':
        currency = 'USD';
        break;
      default:
        currency = 'EUR';
    }

    return value.toLocaleString(locale, { style: 'currency', currency: currency, minimumFractionDigits: 0 });
  }

  function mapStateToProps(_ref) {
    var loanTerm = _ref.loanTerm,
        loanAmount = _ref.loanAmount,
        locale = _ref.locale,
        errorMessage = _ref.errorMessage;

    if (errorMessage) {
      var errorString = '-';
      return {
        monthlyPayments: errorString,
        interestFee: errorString,
        completionFee: errorString,
        totalCost: errorString
      };
    }

    var _calculateAmortisedVa = (0, _calculateAmortisation2['default'])(loanAmount, loanTerm),
        monthlyPayments = _calculateAmortisedVa.monthlyPayments,
        interestFee = _calculateAmortisedVa.interestFee,
        completionFee = _calculateAmortisedVa.completionFee,
        totalCost = _calculateAmortisedVa.totalCost;

    return {
      monthlyPayments: formatCurrency(monthlyPayments, locale),
      interestFee: formatCurrency(interestFee, locale),
      completionFee: formatCurrency(completionFee, locale),
      totalCost: formatCurrency(totalCost, locale)
    };
  }

  exports['default'] = (0, _reactRedux.connect)(mapStateToProps)(_loanBreakdown2['default']);
});