(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('radius/calculator/js/components/loan-amount-numeric-input', ['exports', 'react', 'prop-types', 'react-number-format'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('react-number-format'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.reactNumberFormat);
    global.radiusCalculatorJsComponentsLoanAmountNumericInput = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _reactNumberFormat) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNumberFormat2 = _interopRequireDefault(_reactNumberFormat);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function getLocalConfig(locale) {
    switch (locale) {
      case 'en-GB':
        return {
          thousandSeparator: ',',
          prefix: '£'
        };
      case 'en-US':
        return {
          thousandSeparator: ',',
          prefix: '$'
        };
      default:
        return {
          thousandSeparator: '.',
          decimalSeparator: ',',
          prefix: '',
          suffix: '€'
        };
    }
  }

  var LoanAmountNumericInput = function LoanAmountNumericInput(_ref) {
    var locale = _ref.locale,
        errorMessage = _ref.errorMessage,
        updateLoanAmount = _ref.updateLoanAmount,
        loanAmount = _ref.loanAmount;

    var localConfig = getLocalConfig(locale);

    return _react2['default'].createElement(
      'div',
      null,
      _react2['default'].createElement(_reactNumberFormat2['default'], _extends({
        onValueChange: function onValueChange(data) {
          updateLoanAmount(parseInt(data.value, 10) || 0);
        },
        value: loanAmount
      }, localConfig)),
      errorMessage && _react2['default'].createElement(
        'div',
        { 'data-test-error-message': true },
        errorMessage
      )
    );
  };

  LoanAmountNumericInput.propTypes = {
    loanAmount: _propTypes2['default'].number,
    locale: _propTypes2['default'].string,
    updateLoanAmount: _propTypes2['default'].func,
    errorMessage: _propTypes2['default'].string
  };

  exports['default'] = LoanAmountNumericInput;
});