// config
$golden-grid-max-number: 10!default;
$golden-grid-fallback-class: '.no-flexbox'!default;
$golden-grid-padding: 1.5rem!default;
$golden-grid-ratio: 1.618!default;
$golden-grid-utility-classes: true!default;
$golden-grid-vendor-prefixes: true!default;
$golden-grid-breakpoints: (
  s: false,
  m: mobile-medium,
  l: tablet-medium,
  xl: desktop-medium
)!default;



// mapping the config for easier access
$golden-grid-config: (
  max-number: $golden-grid-max-number,
  no-flex-class: $golden-grid-fallback-class,
  padding: $golden-grid-padding,
  ratio: $golden-grid-ratio,
  utility-classes: $golden-grid-utility-classes,
  utility-classes-breakpoints: $golden-grid-breakpoints,
  vendor-prefixes: $golden-grid-vendor-prefixes
);

// function for easier navigation through the variables map

@function gr($val) {
  @if map-has-key($golden-grid-config, $val) {
    @return map-get($golden-grid-config, $val);
  } @else {
    @error '#{$val} does not exist';
  }
}

// generate the golden scale

@function golden-scale($golden-scale-list: 1) {

  @for $i from $golden-scale-list through gr(max-number) {
    $golden-scale-list-last: nth($golden-scale-list, length($golden-scale-list));

    $golden-scale-list: append($golden-scale-list, $golden-scale-list-last * gr(ratio));
  }

  @return $golden-scale-list;
}

$golden-scale: golden-scale(1);

// send a list of proportions and it returns the percentage for each

@function get-columns-widths($cols) {
  $sum: 0;
  $widths: ();

  // find the sum of all proportions
  @for $i from 1 through length($cols) {
    $current-proportion: nth($cols, $i);
    $ratio-proportion: nth($golden-scale, $current-proportion);
    $sum: $sum + $ratio-proportion;
  }

  // find the proportion for each width
  @for $i from 1 through length($cols) {
    $current-width: 100 * nth($golden-scale, nth($cols, $i)) / $sum;

    @if $i > 1 and $i == length($cols) {
      $current-width: $current-width - .0001; // error margin
    }

    $widths: append($widths, $current-width);
  }

  @return $widths;
}

@mixin column-padding {
  @if gr(padding) {
    padding-left: gr(padding);
    padding-right: gr(padding);
  }
}

// this mixin sets the styling for the wrapper of the elements
// the flag is for table support

@mixin columns-wrapper {

  @if gr(no-flex-class) {
    #{unquote(gr(no-flex-class))} & {
      &:after {
        display: block;
        width: 100%;
        clear: both;
        content: '';
      }
    }
  }

  display: flex;

  @if gr(vendor-prefixes) {
    display: -webkit-flex;
    display: -ms-flexbox;
  }

  flex-wrap: wrap;

  @if gr(vendor-prefixes) {
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
  }

  width: 100%;
}

// mixin that generates the styling for each column in the columns mixin

@mixin set-columns-widths($cols, $start-from: 0) {
  @for $i from 1 through length($cols) {

    // $start-from is making sure we're providing the offset for multiple columns
    > :nth-child(#{$i + $start-from}) {
      width: nth($cols, $i) * 1%;

      // fallback
      @if gr(no-flex-class) {
        #{unquote(gr(no-flex-class))} & {

          @if $i == 1 {
            clear: left;
          }
        }
      }

    }
  }
}

// have a floating column that is still following the golden ratio proportions
// $column is the column proportion related to the full width
// $left is the margin left (as a proportion)
// $right is the margin right (as a proportion)
// eg: @include golden-ratio-paddings(4, 3, 2);

@mixin golden-ratio-paddings($column, $left: false, $right: false) {
  $cols: $column;

  @if $left {
    $cols: append($cols, $left);
  }

  @if $right {
    $cols: append($cols, $right);
  }

  $cols: get-columns-widths($cols);

  width: nth($cols, 1) * 1%;

  @if $left {
    margin-left: nth($cols, 2) * 1%;

    @if $right {
      margin-right: nth($cols, 3) * 1%;
    }
  } @elseif $right {
    margin-right: nth($cols, 2) * 1%;
  }

}

// the mixin that generate the columns with no padding

@mixin columns-no-padding($cols...) {
  @if nth($cols, 1) == equal {
    width: 100%;
    display: flex;

    > * {
      flex-grow: 1;
      flex-shrink: 1;
      flex-basis: 0;
    }

    @if gr(no-flex-class) {
      #{unquote(gr(no-flex-class))} & {
        display: table;
        table-layout: fixed;

        > * {
          display: table-cell;
          width: 1%;
        }
      }
    }
  } @else {
    @include columns-wrapper;

    > * {
      @if gr(no-flex-class) {
        #{unquote(gr(no-flex-class))} & {
          float: left;
        }
      }
    }

    // check if a comma is present in the cols declaration
    $multi-columns: str-index($cols + '', ',');

    @if type-of($multi-columns) == null {

      // all columns are on 1 row, calculate the widths
      $widths: get-columns-widths($cols);

      // set them accordingly
      @include set-columns-widths($widths);

    } @else {
      // we have multiple rows for columns

      // this is the index that counts the :nth-child
      // we need this because we are iterating through a list of lists
      $start-from: 0;

      // go through each row
      @for $i from 1 through length($cols) {

        // find the widths for each row
        $widths: get-columns-widths(nth($cols, $i));

        // set the widths
        @include set-columns-widths($widths, $start-from);

        // update the offset index
        $start-from: $start-from + length($widths);
      }
    }
  }
}

// the mixin that generate the columns with paddings

@mixin columns($cols...) {
  @include columns-no-padding($cols...);

  > * {
    @include column-padding;
  }
}

@if gr(utility-classes) {
  .col {
    // generate responsive classes
    $responsive-map: gr(utility-classes-breakpoints);
    $responsive-keys: map-keys($responsive-map);
    $responsive-values: map-values($responsive-map);

    @for $i from 1 through length($responsive-keys) {
      $breakpoint-from: nth($responsive-values, $i);

      @include from($breakpoint-from) {
        &-#{nth($responsive-keys, $i)} {

          &-wrapper {
            display: table;
            table-layout: fixed;
            width: 100%;
          }

          &-wrapper > * {
            @include column-padding;
            display: table-cell;
            vertical-align: top;
          }

          @for $j from 1 through gr(max-number) {
            $current-absolute-proportion: nth($golden-scale, $j);
            &-#{$j} {
              width: $current-absolute-proportion * 1%;
            }
          }
        }
      }
    }
  }
}
